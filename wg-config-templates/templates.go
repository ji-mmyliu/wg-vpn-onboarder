// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// wg-config-templates/client_peer.conf
// wg-config-templates/help.txt
// wg-config-templates/server_config.conf
// wg-config-templates/server_peer.conf
// wg-config-templates/templates.go
// wg-config-templates/templates_test.go
// wg-config-templates/version.txt
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wgConfigTemplatesClient_peerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\xcf\x6a\xc3\x30\x0c\x06\xf0\xbb\x9e\xc2\x2f\xd0\x0c\xb2\xed\x32\xe8\x61\xac\x3b\x94\x8e\x62\xe8\xb1\xf4\x90\xd5\x5f\xc0\xcc\xd8\x41\xf6\x12\x86\xd0\xbb\x8f\xfc\x21\xe9\x51\xbf\x4f\x42\xdf\xf5\x18\x0b\xb8\x6d\xee\xb8\x91\x65\xdf\x37\x05\x27\xfc\x99\xbd\x11\xa9\x3e\x18\x2e\x57\x9b\xaa\xd2\xbb\x73\x8c\x9c\xe7\x7c\x19\x54\x9f\x9e\x6b\x12\xf1\xad\xa9\x0e\x31\x5f\xc0\x3d\x58\xf5\x70\xbe\xcc\x6b\x0f\x26\x82\xe8\x54\x89\xae\x16\xe0\x1b\xd9\xdf\xef\xe0\xef\xeb\xc3\x11\x57\x52\xa5\xcf\xe8\xba\xe4\x63\xd9\xd2\x55\x76\xaa\x6f\x22\x3b\x33\xe9\x97\xcf\x05\xd1\x26\x2e\x63\xc5\x10\xd2\x00\x77\xb4\x4b\xcb\x33\xca\x90\xf8\x67\x2b\x5b\xbf\x90\x05\xe7\xe9\xa6\x9c\x80\xae\x09\xbe\x87\xd9\x9b\xfa\xf5\x3f\x00\x00\xff\xff\x57\x7b\x39\x30\x0e\x01\x00\x00")

func wgConfigTemplatesClient_peerConfBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesClient_peerConf,
		"wg-config-templates/client_peer.conf",
	)
}

func wgConfigTemplatesClient_peerConf() (*asset, error) {
	bytes, err := wgConfigTemplatesClient_peerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/client_peer.conf", size: 270, mode: os.FileMode(420), modTime: time.Unix(1691437013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesHelpTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xf4\x40\x0c\x84\xfb\x3c\xc5\xfc\xdd\x4f\x87\x8e\x8e\xf6\xa0\x41\x08\x4e\x3a\x89\xab\x4d\xe2\x24\x16\xbb\xeb\xc8\xeb\x5c\xc8\xdb\xa3\x64\x81\x0b\xd2\xb9\xdb\x9d\x6f\x3c\xe3\x13\x87\x5a\x23\xc3\x15\xde\x33\x4e\x62\xdc\x8d\x64\x0d\xde\x0e\x2f\x78\x4d\xef\x4a\xd6\xb0\xfd\xab\xf6\x3a\xcc\x26\x5d\xef\xf8\xbf\xbf\xc1\xee\x76\x77\x87\x27\x89\x71\xc6\xb3\x8c\x55\x75\x1c\x63\x24\x9b\xa1\x2d\x6a\x8d\x91\x52\x93\xef\xab\x6a\xea\xce\xc8\x6c\x67\x36\x24\x9e\xb0\xce\xde\x98\x9c\x33\x68\xfd\x5a\x42\x12\xfb\xa4\xf6\x01\x49\xce\xd6\x52\xcd\x5b\xdf\x38\x14\x1b\x8e\x4e\xe6\x8b\x6d\xb1\x14\x71\xcb\x35\x3a\xa5\xc2\xf5\xa3\xe7\xf2\xfc\xc3\xae\x70\x1d\x84\x93\x5f\xca\x1c\x8c\x07\xb2\xb5\xcd\xb7\x54\x6b\x6a\xa5\x1b\x8d\x5c\x34\xa1\x55\x03\x6d\xd3\x2e\x54\xe2\xda\x81\xc7\xcf\x41\x4b\xad\xeb\x7e\x09\x5c\x92\x7b\x0e\x3f\x97\xac\xf3\x20\x79\x08\x34\x67\x78\x2f\xb9\xa8\x91\x73\xa6\xae\x5c\x7f\x66\xcb\xcb\x82\x2b\x38\xff\x8a\xda\x62\x61\x25\x65\xa7\x10\xb8\xf9\x0a\x00\x00\xff\xff\x86\xf0\x74\x09\xcb\x01\x00\x00")

func wgConfigTemplatesHelpTxtBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesHelpTxt,
		"wg-config-templates/help.txt",
	)
}

func wgConfigTemplatesHelpTxt() (*asset, error) {
	bytes, err := wgConfigTemplatesHelpTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/help.txt", size: 459, mode: os.FileMode(420), modTime: time.Unix(1691437013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesServer_configConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x4f\x4b\x33\x31\x10\xc6\xef\xf9\x14\x03\xef\x7b\xdd\x88\x7f\xf0\x20\xec\x61\xd9\x2a\x14\xa5\x86\xaa\x78\x28\x45\xd2\x64\xb6\x44\x63\x76\x99\xc4\x96\x12\xe6\xbb\x4b\xeb\xae\xed\x1e\xbc\x0d\xcf\xfc\xe6\x21\xf9\x2d\xa6\x21\x21\x35\xda\xe0\x52\x28\x72\x1b\x9d\xf0\x1e\x77\x50\x42\xce\xf2\x09\x69\x83\x24\x6b\x42\x1b\xe5\x71\xc9\x2c\x2a\x6b\x09\x63\x1c\x61\x7d\xc6\x7c\x76\x79\x21\x1e\x5c\x4c\x18\x54\x4b\x69\xc4\x1c\x63\x66\xa1\x08\x5f\x3a\x28\x21\xee\xa2\x49\x1e\x8a\x2d\x04\x4c\xd2\x75\x9b\x2b\xe9\xba\xb7\xa6\xa5\xad\x26\x5b\x9e\xff\xcd\x5d\x4b\xd3\x86\x46\x6a\xef\x65\x4f\xbb\xb0\x3e\x39\x70\x5d\xd2\x2b\x8f\x11\x8a\x0a\xee\x1e\xe7\xaf\xd5\x7c\x02\x85\xdb\x3f\xe7\xf7\xd3\x33\xfd\x89\xcc\x50\xbc\x43\x55\xd7\xb7\xea\x59\xe4\x4c\x3a\xac\x11\xfe\x1b\xef\x30\x24\xb8\x29\x41\xd6\x87\x31\x32\x8b\x7f\xf0\x33\x43\xce\x3d\x20\xa7\x13\x66\xc8\xd9\x35\xc3\x89\x9c\x39\xf3\x11\x0e\xbd\x47\xea\x34\xc3\x60\x99\xc5\x42\x21\xd2\x52\xa8\xaf\x95\x77\x66\x50\x3e\xe0\xbd\xf2\x61\xb7\x37\xee\x7d\xbb\x45\x3b\x55\x71\x04\x8e\xa4\xf7\xd5\xdf\x01\x00\x00\xff\xff\x87\xa7\x7c\x14\xd3\x01\x00\x00")

func wgConfigTemplatesServer_configConfBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesServer_configConf,
		"wg-config-templates/server_config.conf",
	)
}

func wgConfigTemplatesServer_configConf() (*asset, error) {
	bytes, err := wgConfigTemplatesServer_configConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/server_config.conf", size: 467, mode: os.FileMode(420), modTime: time.Unix(1691437013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesServer_peerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\x49\xce\xc9\x4c\xcd\x2b\x51\xb0\xb2\x55\xd0\x73\x06\x33\x8b\x6b\x6b\xb9\xa2\x03\x52\x53\x8b\x62\xb9\x02\x4a\x93\x72\x32\x93\xbd\x53\x2b\x15\x6c\x15\xaa\xab\xa1\x4a\xf5\x9c\x8b\x52\x53\x8a\xf5\xe0\x72\xb5\xb5\x5c\x8e\x39\x39\xf9\xe5\xa9\x29\x9e\x01\xc5\x28\x0a\x1d\x53\x52\x8a\x52\x8b\x8b\x6b\x6b\xf5\x8d\x8d\xb8\xaa\xab\x53\xf3\x52\x6a\x6b\x01\x01\x00\x00\xff\xff\xad\x51\x8d\x87\x78\x00\x00\x00")

func wgConfigTemplatesServer_peerConfBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesServer_peerConf,
		"wg-config-templates/server_peer.conf",
	)
}

func wgConfigTemplatesServer_peerConf() (*asset, error) {
	bytes, err := wgConfigTemplatesServer_peerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/server_peer.conf", size: 120, mode: os.FileMode(420), modTime: time.Unix(1691437013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesTemplatesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5b\x6f\xdb\xc8\x15\x7e\x26\x7f\xc5\xac\x80\x0d\xc8\xc2\x91\x78\xbf\x08\x30\x50\x6c\x92\xa2\x79\x68\x16\xe8\xba\x4f\x3d\x85\x31\x24\x67\x14\xa2\x92\xa8\x92\x74\x72\x9c\xc0\xff\xbd\xf8\xe6\xd0\x8e\xbc\xd9\xd8\x46\xd1\x07\x4a\xe4\x5c\xbe\xf3\x9d\xcb\x7c\x67\x36\x1b\xf5\x66\xe8\x8c\xda\x99\xa3\x19\xf5\x6c\x3a\x65\x87\x51\x9d\x74\xfb\x6f\xbd\x33\xea\xa0\xfb\xa3\x6a\x6e\xd5\x6e\x78\xdd\xf4\xc7\x4e\xcf\x5a\xbd\xfd\x55\x7d\xf8\xf5\x4a\xbd\x7b\xfb\xfe\x6a\xad\x82\x3f\x3f\xec\x0b\xfd\xcd\x46\x4d\xc3\xcd\xd8\x9a\x69\x8b\xf7\xcf\xbb\xd7\xed\x70\xb4\xfd\xee\xf5\x6c\x0e\xa7\xbd\x9e\xcd\xb4\x69\xf7\xbd\x39\xce\xd7\x27\x63\xc6\x35\x26\x7f\xb4\xee\xa3\xd9\x9f\xd6\x33\xcf\x3f\x9a\x9f\xcc\xf8\xc9\x8c\xd7\x32\xfe\x24\xd2\xb2\xf2\x59\x8b\x0f\x6f\xeb\xdd\xf0\xec\x9a\xeb\xd9\x4c\xf3\x13\x0b\x3f\x99\x71\xea\x87\xa3\xf3\xe0\x3c\x94\xbe\xdf\x1f\x4e\xc3\x38\xab\xc0\xf7\x56\xcd\xed\x6c\xa6\x95\xef\xad\xda\xe1\x70\x1a\xcd\x34\x6d\x76\x5f\xfa\x13\x06\xec\x61\xc6\x5f\x3f\xc8\xef\xa6\x1f\x6e\xe6\x7e\x8f\x8f\xc1\x6d\x38\xe9\xf9\xe3\xc6\xf6\x7b\x83\x17\x0c\x4c\xf3\xd8\x1f\x77\x6e\x6e\xee\x0f\x66\xe5\x87\xbe\x6f\x6f\x8e\xad\x5a\x92\xf6\x77\xa3\xbb\xc0\x65\xef\x9f\xff\x82\xd9\x0b\x75\xd4\x07\xa3\x64\x5b\xa8\x82\xfb\x51\x33\x8e\xc3\x18\xaa\xaf\xbe\xb7\xfb\xe2\xbe\xd4\xf6\x52\x81\xd5\xfa\x83\xf9\x0c\x10\x33\x06\x8e\x36\xbe\x7f\xb9\xb1\xd6\x8c\x0e\x36\x0c\x7d\xaf\xb7\x6e\xc3\x4f\x97\xea\xd8\xef\x01\xe1\x8d\x66\xbe\x19\x8f\xf8\xbc\x50\xf6\x30\xaf\xdf\x01\xdd\x06\x2b\x00\xa9\x9f\xff\xb3\x55\x3f\x7f\x5a\x09\x13\x67\x2b\xf4\xbd\x3b\xdf\xf7\x3e\xe9\x51\x35\x37\x56\x89\x1d\x31\xe2\x7b\xd7\x42\xe7\x52\xf5\xc3\xfa\xcd\x70\xba\x0d\x5e\x35\x37\xf6\x42\xed\xbe\x84\xbe\xd7\xee\xdf\xdd\x33\x5d\xbf\xd9\x0f\x93\x09\x42\xff\xff\xc5\x07\x30\x82\xff\x03\x20\x33\x8e\xc2\x7b\x19\x6c\x6e\xec\xfa\x17\x50\x0f\xc2\x0b\xac\xf0\xef\x7c\x7f\xbe\x3d\x19\xa5\xa7\xc9\xcc\x08\xf9\x4d\x3b\x03\xc5\xf9\xb7\xe4\xc3\xf7\xfa\xa3\x1d\x94\x1a\xa6\xf5\x5f\xfa\xbd\x79\x7f\xb4\xc3\xc3\xbe\x25\x85\xf7\xe3\x67\x08\x2e\x87\x4a\x2d\x69\xf4\xbd\xa9\xff\xe2\xbe\xfb\xe3\x5c\x64\xbe\x77\xc0\xb1\x56\x0f\xa0\x7f\x1b\x3a\xe3\x06\xaf\xfa\x83\x51\x28\x93\x35\xde\x60\x67\xb3\x51\x1f\x80\xb5\xb8\x80\xca\x72\x61\x90\x1a\x0a\x6c\xff\x7b\x12\xa1\x5b\x1f\x84\x8b\x69\x90\x79\xd8\xbb\x76\x3b\x05\xf5\x37\x30\x3a\x47\x05\xc5\x27\x50\xb1\x3e\x08\xc5\x81\xc7\xa0\x6e\xa3\x80\xc2\x91\x47\xa0\x70\xf4\x09\x50\xac\x0f\xc2\xf3\x30\x3c\x86\x76\xdb\x7f\x0c\xdd\xdb\x5b\x17\xad\xa7\x2d\x20\x94\x41\xf8\x2d\xac\xdf\x99\x38\x8b\xf5\xfb\xe9\x6d\x3f\x3e\x32\xf3\xf9\xa3\x99\x3f\x9a\x51\x69\xd5\xf5\xa3\x69\xe7\x61\xbc\x7d\xc2\x9c\xdb\x1f\x84\xaa\x19\x86\xfd\xf7\xae\xbc\x1a\xa6\x35\xfc\x80\x8d\x9f\x2e\x55\x74\x9f\x8a\xdb\xe9\x91\xc9\x7e\x52\xd3\xed\xf4\x5c\xec\x7e\xbb\x9d\x24\x1f\x66\xb4\xba\x35\x5f\xef\xce\xec\x2d\xc5\x8d\xf3\x7a\xfd\x79\xf7\xc6\x69\xe0\xd5\xbd\x04\xbe\xf9\x26\xf4\x98\x51\x97\x4b\xa5\x07\x2b\xe2\xd8\x12\x57\x0d\x71\x54\x11\x47\xd1\x1f\x3f\xd6\x12\x67\x2d\x71\x6b\x88\x5b\x4b\x5c\x68\xe2\x36\x25\x4e\x31\xdf\x12\x47\x05\xb1\x8d\x88\x9b\x86\xb8\xc6\x9a\x84\x38\xb1\xc4\xdd\x32\xdf\x24\xc4\xa6\x23\x4e\xf1\x5f\x11\x17\x31\xb1\x6e\x89\x53\xac\xcf\x88\x2b\x43\x5c\x2c\x73\x4d\x4c\x6c\x33\xe2\x3a\x22\xee\x72\xe2\xdc\x12\xb7\x11\x71\xdb\x12\x77\x15\x71\x86\xf9\x82\x38\x4e\x88\xab\x42\x6c\xc0\x6e\x65\x89\x6d\x4b\x9c\xc4\xc4\xa6\x26\xce\x63\xe2\x06\xbc\xf1\x24\xc4\x1d\xe6\x73\xe2\x18\x7e\x36\xc4\x0d\x78\x74\xc4\xc6\xc8\x7b\x1d\x13\x17\xb9\xac\x4b\x4b\xe2\x28\x27\x4e\x4a\xc1\xac\x6b\xe2\xa6\x23\x8e\xc1\xbb\x26\x4e\x8d\xe0\x24\x86\x38\x2f\x89\xeb\x86\x58\x6b\xe2\x2e\x11\x2e\x65\x4a\x5c\x61\x5f\x4b\x6c\x4a\xe2\xb2\x25\x8e\xc1\x09\x7e\x59\x89\x51\xd1\x88\x0f\x16\x98\x9d\xe0\x46\x86\x38\x8d\xbf\xf9\x9c\x76\xc4\x79\x25\xbc\x4b\xf8\x69\x24\x0e\xd8\x1b\x59\xe2\xa4\x20\xae\x96\xb8\x01\xbb\xaa\x89\x35\xb8\x15\xc4\x26\x22\x8e\x1b\xe2\xae\x16\x9f\x8c\x95\x31\xf7\xdf\x48\xfe\xe0\x0f\xf8\xe7\x09\xb1\xce\x25\xb7\x2e\x07\x9a\xd8\x64\xc4\x45\xba\xec\x4f\x88\x73\x70\x28\xc4\xcf\x02\xb6\x13\xc9\x5f\x9a\x4a\xbc\xeb\x52\xf6\x23\x6e\x5d\x2c\xdc\x10\x1f\x60\xb4\x88\x7b\x24\x38\xa8\xa7\xb2\x24\x6e\x32\xe2\x0c\x3c\x16\x8c\x56\x4b\xce\x2d\xf2\x52\x12\x27\x0d\x71\xde\x48\x0e\x31\x0e\x5c\xc4\x12\xb6\x74\x21\xb1\xad\x22\xf1\x37\xaa\x25\x36\x55\x29\x7c\x91\x0f\xab\x25\x6e\xa9\x7d\x5c\xc7\x78\xe0\x73\x09\xbb\xf5\x52\xc3\xc0\x88\xef\xd7\xad\xee\xfb\xf5\x73\xe7\x68\xe9\x2c\x7f\xd4\xb1\xef\xfb\xcf\x59\xc7\xf7\x3d\xef\xd9\x93\x79\xe1\x7b\xde\xea\x25\x57\xb5\xd5\x85\xef\x85\x38\xf0\x2f\x22\x0a\x8e\x7f\x72\x2d\xef\x9c\xa3\xeb\x79\x0f\x17\x8b\x17\x3a\xfb\x5c\x2b\x7f\xe8\xc0\xae\x87\x6e\x2f\x7f\xaf\x62\x5f\xd1\x90\xb6\xea\x85\x4e\xba\x16\xb5\x55\x49\x19\x5d\x38\x71\xdc\x9e\x37\x8e\x20\x4b\xa2\xd0\x8d\x43\xce\xb7\x22\xf7\xff\x38\xf6\x1c\xc4\x45\x1d\x67\x69\x19\xc5\xe9\x85\x8a\xc2\x3b\xdf\xd3\x60\xf2\xca\x45\xe0\xab\x73\x7b\xab\x16\xef\x41\x73\xeb\x7e\xef\x1e\xb2\xa6\x2f\x9e\x96\xd3\xbf\x9a\xfd\xe9\x8a\xe7\xff\x49\x46\x8b\x56\xa4\x0a\x32\x97\x19\x91\xba\x6c\x91\xc9\x2a\x23\xb6\x28\xcb\x56\x8e\x0c\xa4\xa7\xeb\x44\xc2\x50\xda\x90\x49\x3c\x90\x3f\x1d\x89\x14\xc2\x1e\x70\x52\xbd\x1c\xff\x86\x38\x83\xac\x41\x82\x33\x91\x02\x48\x92\x3b\xf2\x95\xfc\xe7\xad\xbc\x77\x90\xad\x94\xb8\x80\x74\xc4\x22\x8b\x4e\xc2\x6a\x99\xab\x3b\x39\xea\xe0\x63\x20\x17\xa9\xf0\xc8\x35\x71\x92\x2e\x12\x82\xe3\x6e\xe4\x08\x67\x8b\x8c\x77\xf0\xa5\x13\xdc\xa8\x93\x79\x1c\x31\xb4\x84\xb2\x5a\xf8\x41\x96\x21\x99\xe0\x87\xd8\x74\xc2\x1d\xbe\xc1\x17\xc8\x1c\x24\x24\x5f\xd6\x42\x16\x20\x05\x78\xda\x58\x64\x1b\x72\x04\x29\x01\x27\x48\x35\xfc\x2f\x63\xe2\x16\x98\x8b\x04\x3b\xd9\x82\xfc\xb4\x22\x45\x88\x89\x93\x6b\x48\x54\x27\xad\x0c\x5c\x21\xff\x90\xc1\x3a\x15\x7b\xe0\x82\x39\xa3\x97\xb6\x57\x49\xee\x20\x4d\x69\xb1\xe0\x18\xe1\x8e\x79\xf8\x58\x57\x22\x4b\x88\x45\x51\x89\x4f\x88\x15\xda\x8f\x93\x7a\xd8\xcd\xc4\x47\xc8\x4d\x56\x2f\x7b\x0b\xb1\xdd\x76\x22\x79\xae\x05\x55\xc4\x71\x26\x12\x8e\x9c\x23\xb6\xa6\x90\x1a\x43\xdb\x42\xfd\x60\xde\xf9\x8b\x9a\xc9\x25\x6e\x4e\xc6\x13\x91\x3e\xe4\x16\x92\x69\x13\xa9\x25\xe4\x0b\x72\x89\x56\x12\x77\x52\x6f\xf0\xd7\xb5\x1b\x2d\x31\x42\xcc\xa2\x52\x5a\x76\x93\x0b\xa7\xa6\x94\xf6\x52\x2c\x31\x81\x0d\xc7\xab\x93\x5a\x4a\x33\x89\x27\x62\x1d\xa5\xc2\xaf\x4b\x97\xf6\x98\x49\x2d\x76\x5a\x6a\xac\x5d\xda\x04\x6a\x17\xf2\x8f\xd6\x87\x9a\x2c\x17\x19\x07\x5e\x9d\x88\x3c\xbb\x76\x68\xa5\xb5\xe0\xba\x60\x81\x89\xf6\x51\x4b\xdd\xc3\x2e\xf2\x81\x9a\x42\x6d\xa1\x6e\xf5\xd2\xca\xd1\x82\xd1\x26\xe0\x2f\x30\x4b\x9c\xbd\x42\x62\x85\x07\x6d\x13\x2d\x06\x71\xc6\xb9\xac\xb4\x70\x44\xfd\xe2\x7a\x92\xe4\x72\x1d\xd0\xa5\xb4\x2e\x5c\x11\x2c\xec\xea\xef\xdb\x49\xb5\x5c\x7f\xca\x4c\x7c\x00\xfe\x4b\xda\xc9\xa2\x23\x67\x6d\xe4\xbf\x01\x00\x00\xff\xff\x8b\x50\x28\x12\x00\x10\x00\x00")

func wgConfigTemplatesTemplatesGoBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesTemplatesGo,
		"wg-config-templates/templates.go",
	)
}

func wgConfigTemplatesTemplatesGo() (*asset, error) {
	bytes, err := wgConfigTemplatesTemplatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/templates.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1691462554, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesTemplates_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xbd\x8e\xdb\x30\x0c\x9e\xa5\xa7\x20\x34\x39\x45\x4e\xd9\x03\x74\x28\xd0\x76\xe8\x70\xc3\x5d\xb6\xa2\x08\x54\x85\xb6\x85\xda\x92\x2b\xd2\xe9\x05\x85\xdf\xbd\xa0\xf2\x03\xa7\x6d\x80\x64\xb0\x04\x90\xfc\x7e\x28\x93\x83\xf3\x3f\x5c\x83\xc0\xd8\x0f\x9d\x63\x24\xad\x43\x3f\xa4\xcc\x50\x69\x65\x12\x19\xad\xcc\xe0\xb8\x95\x9b\x91\x38\xc4\xc6\x68\xad\x4c\x13\xb8\x1d\xbf\x5b\x9f\xfa\x15\x71\x46\xf6\x6d\x5e\x95\x7c\x7d\x58\x39\x22\xcc\x6c\xf4\x42\xeb\x7a\x8c\x1e\x36\x48\xfc\xca\x8e\x83\xdf\x9c\x55\x2a\x86\x77\x27\x3a\xbb\x59\xc0\x6f\xad\xf8\x30\x20\xb8\xdc\x10\x10\xe7\xd1\xb3\xc4\x54\x1d\x3a\x7c\x76\x3d\x4a\x2c\xc4\x46\xab\x49\x2b\x81\x11\xac\xdf\xc3\xd7\x6f\xb3\xca\x38\xaf\x52\x85\x47\x0e\xad\x26\xc9\xca\x57\x4a\xd6\x60\x5e\xdb\x34\x76\x3b\x68\xdd\x1e\xc1\xa7\xbe\x77\x71\x07\x34\xf6\xbd\xcb\x87\xcb\x2b\x98\xa5\x00\x84\x60\x5d\x68\x0a\xfe\xe2\x66\x0d\xa6\xc5\x6e\xb0\xfc\xc6\xc7\xc2\x49\xce\x72\xdc\x12\xda\x63\xa6\x90\xe2\xfd\x02\x27\xc0\x23\x1a\x84\x79\x8f\x79\xeb\x53\xac\x43\x73\xbf\xd2\x15\xcc\xca\x75\xaf\xa0\xef\x02\x46\xde\x0e\x88\xf9\x7e\xb9\x19\xe8\x21\xb1\x93\xcd\xc7\xc4\x66\xa0\xff\x89\x4d\x5a\xab\x3a\x65\xd8\x2e\x81\x59\x46\x2a\xbb\x58\x76\x41\x26\x4c\xc8\xd8\xbe\x8c\xb1\x62\xb6\x62\x68\x09\x32\xcd\xff\x4e\xae\x52\xf8\x36\xa0\x67\xdc\x7d\x74\xec\x96\x80\x39\x0b\x57\x22\xfb\x82\x6e\xf7\x39\x74\x28\x0c\xe2\xcf\x9e\xad\x2d\x8a\xef\xb2\x26\xf6\x39\x74\x15\x17\x54\x89\x9e\x7b\xbb\xe2\xfa\x40\x84\x5c\xc9\x1e\xda\x2f\x29\xc4\xca\xfc\x6a\x9e\x8e\x3f\xec\xe9\xb2\xb8\x46\x9a\xf8\x4b\xe6\x96\xce\x2c\xfc\xe9\xe7\xe8\x8e\x89\xab\x26\xe6\x36\x84\x65\x5a\xc8\x73\x4d\xfa\x4f\x00\x00\x00\xff\xff\x16\x4c\x31\xfc\x30\x04\x00\x00")

func wgConfigTemplatesTemplates_testGoBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesTemplates_testGo,
		"wg-config-templates/templates_test.go",
	)
}

func wgConfigTemplatesTemplates_testGo() (*asset, error) {
	bytes, err := wgConfigTemplatesTemplates_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/templates_test.go", size: 1072, mode: os.FileMode(420), modTime: time.Unix(1691462526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesVersionTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4f\x2f\x53\x28\x4b\x2d\x2a\xce\xcc\xcf\x53\x28\x33\xd4\x33\xd0\x33\x07\x04\x00\x00\xff\xff\xee\x20\x2a\x84\x12\x00\x00\x00")

func wgConfigTemplatesVersionTxtBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesVersionTxt,
		"wg-config-templates/version.txt",
	)
}

func wgConfigTemplatesVersionTxt() (*asset, error) {
	bytes, err := wgConfigTemplatesVersionTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/version.txt", size: 18, mode: os.FileMode(420), modTime: time.Unix(1691461580, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wg-config-templates/client_peer.conf":   wgConfigTemplatesClient_peerConf,
	"wg-config-templates/help.txt":           wgConfigTemplatesHelpTxt,
	"wg-config-templates/server_config.conf": wgConfigTemplatesServer_configConf,
	"wg-config-templates/server_peer.conf":   wgConfigTemplatesServer_peerConf,
	"wg-config-templates/templates.go":       wgConfigTemplatesTemplatesGo,
	"wg-config-templates/templates_test.go":  wgConfigTemplatesTemplates_testGo,
	"wg-config-templates/version.txt":        wgConfigTemplatesVersionTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wg-config-templates": &bintree{nil, map[string]*bintree{
		"client_peer.conf":   &bintree{wgConfigTemplatesClient_peerConf, map[string]*bintree{}},
		"help.txt":           &bintree{wgConfigTemplatesHelpTxt, map[string]*bintree{}},
		"server_config.conf": &bintree{wgConfigTemplatesServer_configConf, map[string]*bintree{}},
		"server_peer.conf":   &bintree{wgConfigTemplatesServer_peerConf, map[string]*bintree{}},
		"templates.go":       &bintree{wgConfigTemplatesTemplatesGo, map[string]*bintree{}},
		"templates_test.go":  &bintree{wgConfigTemplatesTemplates_testGo, map[string]*bintree{}},
		"version.txt":        &bintree{wgConfigTemplatesVersionTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
