// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// wg-config-templates/client_peer.conf
// wg-config-templates/help.txt
// wg-config-templates/server_config.conf
// wg-config-templates/server_peer.conf
// wg-config-templates/templates.go
// wg-config-templates/version.txt
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wgConfigTemplatesClient_peerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\xcf\x6a\xc3\x30\x0c\x06\xf0\xbb\x9e\xc2\x2f\xd0\x0c\xb2\xed\x32\xe8\x61\xac\x3b\x94\x8e\x62\xe8\xb1\xf4\x90\xd5\x5f\xc0\xcc\xd8\x41\xf6\x12\x86\xd0\xbb\x8f\xfc\x21\xe9\x51\xbf\x4f\x42\xdf\xf5\x18\x0b\xb8\x6d\xee\xb8\x91\x65\xdf\x37\x05\x27\xfc\x99\xbd\x11\xa9\x3e\x18\x2e\x57\x9b\xaa\xd2\xbb\x73\x8c\x9c\xe7\x7c\x19\x54\x9f\x9e\x6b\x12\xf1\xad\xa9\x0e\x31\x5f\xc0\x3d\x58\xf5\x70\xbe\xcc\x6b\x0f\x26\x82\xe8\x54\x89\xae\x16\xe0\x1b\xd9\xdf\xef\xe0\xef\xeb\xc3\x11\x57\x52\xa5\xcf\xe8\xba\xe4\x63\xd9\xd2\x55\x76\xaa\x6f\x22\x3b\x33\xe9\x97\xcf\x05\xd1\x26\x2e\x63\xc5\x10\xd2\x00\x77\xb4\x4b\xcb\x33\xca\x90\xf8\x67\x2b\x5b\xbf\x90\x05\xe7\xe9\xa6\x9c\x80\xae\x09\xbe\x87\xd9\x9b\xfa\xf5\x3f\x00\x00\xff\xff\x57\x7b\x39\x30\x0e\x01\x00\x00")

func wgConfigTemplatesClient_peerConfBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesClient_peerConf,
		"wg-config-templates/client_peer.conf",
	)
}

func wgConfigTemplatesClient_peerConf() (*asset, error) {
	bytes, err := wgConfigTemplatesClient_peerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/client_peer.conf", size: 270, mode: os.FileMode(420), modTime: time.Unix(1691208390, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesHelpTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xf4\x40\x0c\x84\xfb\x3c\xc5\xfc\xdd\x4f\x87\x8e\x8e\xf6\xa0\x41\x08\x4e\x3a\x89\xab\x4d\xe2\x24\x16\xbb\xeb\xc8\xeb\x5c\xc8\xdb\xa3\x64\x81\x0b\xd2\xb9\xdb\x9d\x6f\x3c\xe3\x13\x87\x5a\x23\xc3\x15\xde\x33\x4e\x62\xdc\x8d\x64\x0d\xde\x0e\x2f\x78\x4d\xef\x4a\xd6\xb0\xfd\xab\xf6\x3a\xcc\x26\x5d\xef\xf8\xbf\xbf\xc1\xee\x76\x77\x87\x27\x89\x71\xc6\xb3\x8c\x55\x75\x1c\x63\x24\x9b\xa1\x2d\x6a\x8d\x91\x52\x93\xef\xab\x6a\xea\xce\xc8\x6c\x67\x36\x24\x9e\xb0\xce\xde\x98\x9c\x33\x68\xfd\x5a\x42\x12\xfb\xa4\xf6\x01\x49\xce\xd6\x52\xcd\x5b\xdf\x38\x14\x1b\x8e\x4e\xe6\x8b\x6d\xb1\x14\x71\xcb\x35\x3a\xa5\xc2\xf5\xa3\xe7\xf2\xfc\xc3\xae\x70\x1d\x84\x93\x5f\xca\x1c\x8c\x07\xb2\xb5\xcd\xb7\x54\x6b\x6a\xa5\x1b\x8d\x5c\x34\xa1\x55\x03\x6d\xd3\x2e\x54\xe2\xda\x81\xc7\xcf\x41\x4b\xad\xeb\x7e\x09\x5c\x92\x7b\x0e\x3f\x97\xac\xf3\x20\x79\x08\x34\x67\x78\x2f\xb9\xa8\x91\x73\xa6\xae\x5c\x7f\x66\xcb\xcb\x82\x2b\x38\xff\x8a\xda\x62\x61\x25\x65\xa7\x10\xb8\xf9\x0a\x00\x00\xff\xff\x86\xf0\x74\x09\xcb\x01\x00\x00")

func wgConfigTemplatesHelpTxtBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesHelpTxt,
		"wg-config-templates/help.txt",
	)
}

func wgConfigTemplatesHelpTxt() (*asset, error) {
	bytes, err := wgConfigTemplatesHelpTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/help.txt", size: 459, mode: os.FileMode(420), modTime: time.Unix(1691204967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesServer_configConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x4f\x4b\x33\x31\x10\xc6\xef\xf9\x14\x03\xef\x7b\xdd\x88\x7f\xf0\x20\xec\x61\xd9\x2a\x14\xa5\x86\xaa\x78\x28\x45\xd2\x64\xb6\x44\x63\x76\x99\xc4\x96\x12\xe6\xbb\x4b\xeb\xae\xed\x1e\xbc\x0d\xcf\xfc\xe6\x21\xf9\x2d\xa6\x21\x21\x35\xda\xe0\x52\x28\x72\x1b\x9d\xf0\x1e\x77\x50\x42\xce\xf2\x09\x69\x83\x24\x6b\x42\x1b\xe5\x71\xc9\x2c\x2a\x6b\x09\x63\x1c\x61\x7d\xc6\x7c\x76\x79\x21\x1e\x5c\x4c\x18\x54\x4b\x69\xc4\x1c\x63\x66\xa1\x08\x5f\x3a\x28\x21\xee\xa2\x49\x1e\x8a\x2d\x04\x4c\xd2\x75\x9b\x2b\xe9\xba\xb7\xa6\xa5\xad\x26\x5b\x9e\xff\xcd\x5d\x4b\xd3\x86\x46\x6a\xef\x65\x4f\xbb\xb0\x3e\x39\x70\x5d\xd2\x2b\x8f\x11\x8a\x0a\xee\x1e\xe7\xaf\xd5\x7c\x02\x85\xdb\x3f\xe7\xf7\xd3\x33\xfd\x89\xcc\x50\xbc\x43\x55\xd7\xb7\xea\x59\xe4\x4c\x3a\xac\x11\xfe\x1b\xef\x30\x24\xb8\x29\x41\xd6\x87\x31\x32\x8b\x7f\xf0\x33\x43\xce\x3d\x20\xa7\x13\x66\xc8\xd9\x35\xc3\x89\x9c\x39\xf3\x11\x0e\xbd\x47\xea\x34\xc3\x60\x99\xc5\x42\x21\xd2\x52\xa8\xaf\x95\x77\x66\x50\x3e\xe0\xbd\xf2\x61\xb7\x37\xee\x7d\xbb\x45\x3b\x55\x71\x04\x8e\xa4\xf7\xd5\xdf\x01\x00\x00\xff\xff\x87\xa7\x7c\x14\xd3\x01\x00\x00")

func wgConfigTemplatesServer_configConfBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesServer_configConf,
		"wg-config-templates/server_config.conf",
	)
}

func wgConfigTemplatesServer_configConf() (*asset, error) {
	bytes, err := wgConfigTemplatesServer_configConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/server_config.conf", size: 467, mode: os.FileMode(420), modTime: time.Unix(1691204967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesServer_peerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\x49\xce\xc9\x4c\xcd\x2b\x51\xb0\xb2\x55\xd0\x73\x06\x33\x8b\x6b\x6b\xb9\xa2\x03\x52\x53\x8b\x62\xb9\x02\x4a\x93\x72\x32\x93\xbd\x53\x2b\x15\x6c\x15\xaa\xab\xa1\x4a\xf5\x9c\x8b\x52\x53\x8a\xf5\xe0\x72\xb5\xb5\x5c\x8e\x39\x39\xf9\xe5\xa9\x29\x9e\x01\xc5\x28\x0a\x1d\x53\x52\x8a\x52\x8b\x8b\x6b\x6b\xf5\x8d\x8d\xb8\xaa\xab\x53\xf3\x52\x6a\x6b\x01\x01\x00\x00\xff\xff\xad\x51\x8d\x87\x78\x00\x00\x00")

func wgConfigTemplatesServer_peerConfBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesServer_peerConf,
		"wg-config-templates/server_peer.conf",
	)
}

func wgConfigTemplatesServer_peerConf() (*asset, error) {
	bytes, err := wgConfigTemplatesServer_peerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/server_peer.conf", size: 120, mode: os.FileMode(420), modTime: time.Unix(1691204967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesTemplatesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdb\x6e\xdc\xc8\x11\x7d\x26\xbf\xa2\x77\x80\x35\xc8\x40\x9e\xe1\xfd\x32\x80\x80\x60\x65\x07\xf1\x43\xbc\x40\x56\x79\x4a\x05\x46\x93\xec\x1e\x13\x99\x19\x4e\x48\xca\x2e\xd9\xd0\xbf\x07\xa7\x8b\x92\xa5\xf5\xea\x02\x63\x1f\x38\x43\xf6\xe5\xd4\xa9\x4b\x9f\xea\xcd\x46\x5d\x0c\x9d\x51\x3b\x73\x34\xa3\x9e\x4d\xa7\xec\x30\xaa\x93\x6e\xff\xab\x77\x46\x1d\x74\x7f\x54\xcd\xb5\xda\x0d\xaf\x9b\xfe\xd8\xe9\x59\xab\x37\xbf\xaa\xf7\xbf\x5e\xaa\xb7\x6f\xde\x5d\xae\x55\xf0\xd7\xbb\x7d\xa1\xbf\xd9\xa8\x69\xb8\x1a\x5b\x33\x6d\xf1\xfe\x79\xf7\xba\x1d\x8e\xb6\xdf\xbd\x9e\xcd\xe1\xb4\xd7\xb3\x99\x36\xed\xbe\x37\xc7\xf9\xc3\xc9\x98\x71\x8d\xc9\xc7\xd6\x7d\x34\xfb\xd3\x7a\xe6\xf9\xb1\xf9\xc9\x8c\x9f\xcc\xf8\x41\xc6\x9f\x44\x5a\x56\x3e\x6b\xf1\xee\x6d\xbd\x1b\x1e\x5b\xf3\xc9\x8c\x53\x3f\x1c\x1d\xb1\xfb\x11\xf2\xfd\xfe\x70\x1a\xc6\x59\x05\xbe\xb7\x6a\xae\x67\x33\xad\x7c\x6f\xd5\x0e\x87\xd3\x68\xa6\x69\xb3\xfb\xd2\x9f\x30\x60\x0f\x33\xfe\xfa\x41\x7e\x37\xfd\x70\x35\xf7\x7b\x7c\x0c\x6e\xc3\x49\xcf\x1f\x37\xb6\xdf\x1b\xbc\x60\x60\x9a\xc7\xfe\xb8\x73\x73\x73\x7f\x30\x2b\x3f\xf4\x7d\x7b\x75\x6c\xd5\x92\x8b\x7f\x1a\xdd\x05\x2e\x29\xff\xfe\x0f\xcc\x9e\xa9\xa3\x3e\x18\x25\xdb\x42\x15\xdc\x8e\x9a\x71\x1c\xc6\x50\x7d\xf5\xbd\xdd\x17\xf7\xa5\xb6\xe7\x0a\xac\xd6\xef\xcd\x67\x80\x98\x31\x70\xb4\xf1\xfd\xcb\x95\xb5\x66\x74\xb0\x61\xe8\x7b\xbd\x75\x1b\x7e\x3a\x57\xc7\x7e\x0f\x08\x6f\x34\xf3\xd5\x78\xc4\xe7\x99\xb2\x87\x79\xfd\x16\xe8\x36\x58\x01\x48\xfd\xfc\xbf\xad\xfa\xf9\xd3\x4a\x98\x38\x5b\xa1\xef\xdd\xf8\xbe\xf7\x49\x8f\xaa\xb9\xb2\x4a\xec\x88\x11\xdf\xfb\x20\x74\xce\x55\x3f\xac\x2f\x86\xd3\x75\xf0\xaa\xb9\xb2\x67\x6a\xf7\x25\xf4\xbd\x76\xff\xf6\x96\xe9\xfa\x62\x3f\x4c\x26\x08\xfd\x3f\x8b\x0f\x60\x04\xff\x11\x20\x33\x8e\xc2\x7b\x19\x6c\xae\xec\xfa\x17\x50\x0f\xc2\x33\xac\xf0\x6f\x7c\x7f\xbe\x3e\x19\xa5\xa7\xc9\xcc\x08\xf9\x55\x3b\x03\xc5\xf9\xb7\xe4\xc3\xf7\xfa\xa3\x1d\x94\x1a\xa6\xf5\xdf\xfa\xbd\x79\x77\xb4\xc3\xdd\xbe\x25\x85\xb7\xe3\xf7\x10\x5c\x0e\x95\x5a\xd2\xe8\x7b\x53\xff\xc5\x7d\xf7\xc7\xb9\xc8\x7c\xef\x80\xd3\xaa\xee\x40\xff\x31\x74\xc6\x0d\x5e\xf6\x07\xa3\x50\x26\x6b\xbc\xc1\xce\x66\xa3\xde\x03\x6b\x71\x01\x95\xe5\xc2\x20\x35\x14\xd8\xfe\xf7\x24\x42\xb7\x3e\x08\x17\xd3\x20\x73\xb7\x77\xed\x76\x0a\xea\x6f\x60\x74\x1f\x15\x14\x9f\x40\xc5\xfa\x20\x14\x07\x1e\x82\xba\x8d\x02\x0a\x47\x1e\x80\xc2\xd1\x27\x40\xb1\x3e\x08\xef\x87\xe1\x21\xb4\xdb\xfe\x38\x74\x6f\xaf\x5d\xb4\x9e\xb6\x80\x50\x06\xe1\xb7\xb0\x7e\x67\xe2\x5e\xac\xdf\x4d\x6f\xfa\xf1\x81\x99\xcf\x1f\xcd\xfc\xd1\x8c\x4a\xab\xae\x1f\x4d\x3b\x0f\xe3\xf5\x13\xe6\xdc\xfe\x20\x54\xcd\x30\xec\xbf\x77\xe5\xd5\x30\xad\xe1\x07\x6c\xfc\x74\xae\xa2\xdb\x54\x5c\x4f\x0f\x4c\xf6\x93\x9a\xae\xa7\xe7\x62\xf7\xdb\xf5\x24\xf9\x30\xa3\xd5\xad\xf9\x7a\x73\xcf\xde\x52\xdc\x38\xaf\x1f\x3e\xef\x2e\x9c\x06\x5e\xde\x4a\xe0\xc5\x37\xfd\xc6\x8c\x3a\x5f\x2a\x3d\x58\x11\xc7\x96\xb8\x6a\x88\xa3\x8a\x38\x8a\xfe\xf8\xb1\x96\x38\x6b\x89\x5b\x43\xdc\x5a\xe2\x42\x13\xb7\x29\x71\x8a\xf9\x96\x38\x2a\x88\x6d\x44\xdc\x34\xc4\x35\xd6\x24\xc4\x89\x25\xee\x96\xf9\x26\x21\x36\x1d\x71\x8a\xff\x8a\xb8\x88\x89\x75\x4b\x9c\x62\x7d\x46\x5c\x19\xe2\x62\x99\x6b\x62\x62\x9b\x11\xd7\x11\x71\x97\x13\xe7\x96\xb8\x8d\x88\xdb\x96\xb8\xab\x88\x33\xcc\x17\xc4\x71\x42\x5c\x15\x62\x03\x76\x2b\x4b\x6c\x5b\xe2\x24\x26\x36\x35\x71\x1e\x13\x37\xe0\x8d\x27\x21\xee\x30\x9f\x13\xc7\xf0\xb3\x21\x6e\xc0\xa3\x23\x36\x46\xde\xeb\x98\xb8\xc8\x65\x5d\x5a\x12\x47\x39\x71\x52\x0a\x66\x5d\x13\x37\x1d\x71\x0c\xde\x35\x71\x6a\x04\x27\x31\xc4\x79\x49\x5c\x37\xc4\x5a\x13\x77\x89\x70\x29\x53\xe2\x0a\xfb\x5a\x62\x53\x12\x97\x2d\x71\x0c\x4e\xf0\xcb\x4a\x8c\x8a\x46\x7c\xb0\xc0\xec\x04\x37\x32\xc4\x69\xfc\xcd\xe7\xb4\x23\xce\x2b\xe1\x5d\xc2\x4f\x23\x71\xc0\xde\xc8\x12\x27\x05\x71\xb5\xc4\x0d\xd8\x55\x4d\xac\xc1\xad\x20\x36\x11\x71\xdc\x10\x77\xb5\xf8\x64\xac\x8c\xb9\xff\x46\xf2\x07\x7f\xc0\x3f\x4f\x88\x75\x2e\xb9\x75\x39\xd0\xc4\x26\x23\x2e\xd2\x65\x7f\x42\x9c\x83\x43\x21\x7e\x16\xb0\x9d\x48\xfe\xd2\x54\xe2\x5d\x97\xb2\x1f\x71\xeb\x62\xe1\x86\xf8\x00\xa3\x45\xdc\x23\xc1\x41\x3d\x95\x25\x71\x93\x11\x67\xe0\xb1\x60\xb4\x5a\x72\x6e\x91\x97\x92\x38\x69\x88\xf3\x46\x72\x88\x71\xe0\x22\x96\xb0\xa5\x0b\x89\x6d\x15\x89\xbf\x51\x2d\xb1\xa9\x4a\xe1\x8b\x7c\x58\x2d\x71\x4b\xed\xc3\x3a\xc6\x03\x9f\x4b\xd8\xad\x97\x1a\x06\x46\x7c\xbb\x6e\x75\xdb\xaf\x9f\x3b\x47\x4b\x67\xf9\xa3\x8e\x7d\xdb\x7f\xee\x75\x7c\xdf\xf3\x9e\x3d\x99\x67\xbe\xe7\xad\x5e\x72\x03\x5b\x9d\xf9\x5e\x88\x03\xff\x22\xa2\xe0\xf8\x17\xd7\xf2\xee\x73\x74\x3d\xef\xee\x62\xf1\x42\x67\x9f\x6b\xe5\x77\x1d\xd8\xf5\xd0\xed\xf9\xef\x55\xec\x2b\x1a\xd2\x56\xbd\xd0\x49\xd7\xa2\xb6\x2a\x29\xa3\x33\x27\x8e\xdb\xfb\x8d\x23\xc8\x92\x28\x74\xe3\x90\xf3\xad\xc8\xfd\xbf\x8e\x3d\x07\x71\x51\xc7\x49\x54\xa5\x75\x74\xa6\xa2\xf0\xc6\xf7\x34\x98\xbc\x72\x11\xf8\xea\xdc\xde\xaa\xc5\x7b\xd0\xdc\xba\xdf\x9b\xbb\xac\xe9\xb3\xa7\xe5\xf4\xef\x66\x7f\xba\xe4\xf9\x87\x64\xb4\x68\x45\xaa\x20\x73\x99\x11\xa9\xcb\x16\x99\xac\x32\x62\x8b\xb2\x6c\xe5\xc8\x40\x7a\xba\x4e\x24\x0c\xa5\x0d\x99\xc4\x03\xf9\xd3\x91\x48\x21\xec\x01\x27\xd5\xcb\xf1\x6f\x88\x33\xc8\x1a\x24\x38\x13\x29\x80\x24\xb9\x23\x5f\xc9\x7f\xde\xca\x7b\x07\xd9\x4a\x89\x0b\x48\x47\x2c\xb2\xe8\x24\xac\x96\xb9\xba\x93\xa3\x0e\x3e\x06\x72\x91\x0a\x8f\x5c\x13\x27\xe9\x22\x21\x38\xee\x46\x8e\x70\xb6\xc8\x78\x07\x5f\x3a\xc1\x8d\x3a\x99\xc7\x11\x43\x4b\x28\xab\x85\x1f\x64\x19\x92\x09\x7e\x88\x4d\x27\xdc\xe1\x1b\x7c\x81\xcc\x41\x42\xf2\x65\x2d\x64\x01\x52\x80\xa7\x8d\x45\xb6\x21\x47\x90\x12\x70\x82\x54\xc3\xff\x32\x26\x6e\x81\xb9\x48\xb0\x93\x2d\xc8\x4f\x2b\x52\x84\x98\x38\xb9\x86\x44\x75\xd2\xca\xc0\x15\xf2\x0f\x19\xac\x53\xb1\x07\x2e\x98\x33\x7a\x69\x7b\x95\xe4\x0e\xd2\x94\x16\x0b\x8e\x11\xee\x98\x87\x8f\x75\x25\xb2\x84\x58\x14\x95\xf8\x84\x58\xa1\xfd\x38\xa9\x87\xdd\x4c\x7c\x84\xdc\x64\xf5\xb2\xb7\x10\xdb\x6d\x27\x92\xe7\x5a\x50\x45\x1c\x67\x22\xe1\xc8\x39\x62\x6b\x0a\xa9\x31\xb4\x2d\xd4\x0f\xe6\x9d\xbf\xa8\x99\x5c\xe2\xe6\x64\x3c\x11\xe9\x43\x6e\x21\x99\x36\x91\x5a\x42\xbe\x20\x97\x68\x25\x71\x27\xf5\x06\x7f\x5d\xbb\xd1\x12\x23\xc4\x2c\x2a\xa5\x65\x37\xb9\x70\x6a\x4a\x69\x2f\xc5\x12\x13\xd8\x70\xbc\x3a\xa9\xa5\x34\x93\x78\x22\xd6\x51\x2a\xfc\xba\x74\x69\x8f\x99\xd4\x62\xa7\xa5\xc6\xda\xa5\x4d\xa0\x76\x21\xff\x68\x7d\xa8\xc9\x72\x91\x71\xe0\xd5\x89\xc8\xb3\x6b\x87\x56\x5a\x0b\xae\x0b\x16\x98\x68\x1f\xb5\xd4\x3d\xec\x22\x1f\xa8\x29\xd4\x16\xea\x56\x2f\xad\x1c\x2d\x18\x6d\x02\xfe\x02\xb3\xc4\xd9\x2b\x24\x56\x78\xd0\x36\xd1\x62\x10\x67\x9c\xcb\x4a\x0b\x47\xd4\x2f\xae\x27\x49\x2e\xd7\x01\x5d\x4a\xeb\xc2\x15\xc1\xc2\xae\xfe\xbe\x9d\x54\xcb\xf5\xa7\xcc\xc4\x07\xe0\xbf\xa4\x9d\x2c\x3a\xf2\x23\x6d\xe4\xff\x01\x00\x00\xff\xff\x5a\x48\xae\x97\x00\x10\x00\x00")

func wgConfigTemplatesTemplatesGoBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesTemplatesGo,
		"wg-config-templates/templates.go",
	)
}

func wgConfigTemplatesTemplatesGo() (*asset, error) {
	bytes, err := wgConfigTemplatesTemplatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/templates.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1691209244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesVersionTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4f\x2f\x53\x28\x4b\x2d\x2a\xce\xcc\xcf\x53\x28\x33\xd4\x33\xd0\x33\x01\x04\x00\x00\xff\xff\x54\x71\x23\x1d\x12\x00\x00\x00")

func wgConfigTemplatesVersionTxtBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesVersionTxt,
		"wg-config-templates/version.txt",
	)
}

func wgConfigTemplatesVersionTxt() (*asset, error) {
	bytes, err := wgConfigTemplatesVersionTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/version.txt", size: 18, mode: os.FileMode(420), modTime: time.Unix(1691204967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wg-config-templates/client_peer.conf":   wgConfigTemplatesClient_peerConf,
	"wg-config-templates/help.txt":           wgConfigTemplatesHelpTxt,
	"wg-config-templates/server_config.conf": wgConfigTemplatesServer_configConf,
	"wg-config-templates/server_peer.conf":   wgConfigTemplatesServer_peerConf,
	"wg-config-templates/templates.go":       wgConfigTemplatesTemplatesGo,
	"wg-config-templates/version.txt":        wgConfigTemplatesVersionTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wg-config-templates": &bintree{nil, map[string]*bintree{
		"client_peer.conf":   &bintree{wgConfigTemplatesClient_peerConf, map[string]*bintree{}},
		"help.txt":           &bintree{wgConfigTemplatesHelpTxt, map[string]*bintree{}},
		"server_config.conf": &bintree{wgConfigTemplatesServer_configConf, map[string]*bintree{}},
		"server_peer.conf":   &bintree{wgConfigTemplatesServer_peerConf, map[string]*bintree{}},
		"templates.go":       &bintree{wgConfigTemplatesTemplatesGo, map[string]*bintree{}},
		"version.txt":        &bintree{wgConfigTemplatesVersionTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
