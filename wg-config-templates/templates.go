// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// wg-config-templates/client_peer.conf
// wg-config-templates/help.txt
// wg-config-templates/server_config.conf
// wg-config-templates/server_peer.conf
// wg-config-templates/templates.go
// wg-config-templates/templates_test.go
// wg-config-templates/version.txt
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wgConfigTemplatesClient_peerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x41\x6a\xc3\x30\x10\x45\xf7\x3a\x85\x2e\x10\x25\xb8\xed\xa6\x90\x45\x69\xb2\x08\x29\x46\x34\xdd\x85\x2c\xdc\xe8\x07\x44\x85\x14\x46\x8a\xdd\x32\xcc\xdd\x8b\xed\xd6\x0e\xb3\x9a\xf7\x07\xfe\x9b\xe3\x2e\x16\xd0\xa5\x39\xe3\xa4\x2c\xf9\xb6\x29\xd8\xe3\x47\xaf\x35\xb3\x79\x25\xb8\x6c\x66\x2a\xa2\x5e\x9c\x23\xe4\x3c\xe6\x7f\x8b\xc8\xf2\xa1\x52\xcc\xfe\xa2\xcd\x26\xe6\x03\xa8\x05\x89\x6c\xea\xc3\x78\x76\xc7\x98\x11\x9d\x88\x52\x47\x0b\xd0\x49\xd9\xdb\x67\xf0\xe7\xa9\xb0\x87\x13\x12\x51\xdb\xe8\xae\xc9\xc7\x32\xa7\x13\x59\x88\x3c\x33\x2f\xf4\x40\xdf\x7c\x2e\x88\x36\x51\xe9\x15\x43\x48\x1d\xdc\xce\x8e\x96\xbd\xd5\x7b\xba\x15\x7c\xa4\xed\xb7\x2f\x75\x72\x10\x59\x99\x61\x96\x2b\x66\x84\x8c\x5e\xcc\xd4\x28\x5d\xa2\xaf\xf9\xa9\xea\xf1\x5f\xd7\x82\xf2\x50\x51\xf6\xc0\xb5\x09\xbe\x85\x5e\xeb\xea\xe9\x37\x00\x00\xff\xff\xc8\x23\x55\xf9\x3d\x01\x00\x00")

func wgConfigTemplatesClient_peerConfBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesClient_peerConf,
		"wg-config-templates/client_peer.conf",
	)
}

func wgConfigTemplatesClient_peerConf() (*asset, error) {
	bytes, err := wgConfigTemplatesClient_peerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/client_peer.conf", size: 317, mode: os.FileMode(420), modTime: time.Unix(1714090657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesHelpTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xf4\x40\x0c\x84\xfb\x3c\xc5\xfc\xdd\x4f\x87\x8e\x8e\xf6\xa0\x41\x08\x4e\x3a\x89\xab\x4d\xe2\x24\x16\xbb\xeb\xc8\xeb\x5c\xc8\xdb\xa3\x64\x81\x0b\xd2\xb9\xdb\x9d\x6f\x3c\xe3\x13\x87\x5a\x23\xc3\x15\xde\x33\x4e\x62\xdc\x8d\x64\x0d\xde\x0e\x2f\x78\x4d\xef\x4a\xd6\xb0\xfd\xab\xf6\x3a\xcc\x26\x5d\xef\xf8\xbf\xbf\xc1\xee\x76\x77\x87\x27\x89\x71\xc6\xb3\x8c\x55\x75\x1c\x63\x24\x9b\xa1\x2d\x6a\x8d\x91\x52\x93\xef\xab\x6a\xea\xce\xc8\x6c\x67\x36\x24\x9e\xb0\xce\xde\x98\x9c\x33\x68\xfd\x5a\x42\x12\xfb\xa4\xf6\x01\x49\xce\xd6\x52\xcd\x5b\xdf\x38\x14\x1b\x8e\x4e\xe6\x8b\x6d\xb1\x14\x71\xcb\x35\x3a\xa5\xc2\xf5\xa3\xe7\xf2\xfc\xc3\xae\x70\x1d\x84\x93\x5f\xca\x1c\x8c\x07\xb2\xb5\xcd\xb7\x54\x6b\x6a\xa5\x1b\x8d\x5c\x34\xa1\x55\x03\x6d\xd3\x2e\x54\xe2\xda\x81\xc7\xcf\x41\x4b\xad\xeb\x7e\x09\x5c\x92\x7b\x0e\x3f\x97\xac\xf3\x20\x79\x08\x34\x67\x78\x2f\xb9\xa8\x91\x73\xa6\xae\x5c\x7f\x66\xcb\xcb\x82\x2b\x38\xff\x8a\xda\x62\x61\x25\x65\xa7\x10\xb8\xf9\x0a\x00\x00\xff\xff\x86\xf0\x74\x09\xcb\x01\x00\x00")

func wgConfigTemplatesHelpTxtBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesHelpTxt,
		"wg-config-templates/help.txt",
	)
}

func wgConfigTemplatesHelpTxt() (*asset, error) {
	bytes, err := wgConfigTemplatesHelpTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/help.txt", size: 459, mode: os.FileMode(420), modTime: time.Unix(1714087262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesServer_configConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x5f\x4b\xc3\x30\x14\xc5\xdf\xf3\x29\x2e\xe8\x6b\xb3\x3f\x8e\x09\x42\x1f\x4a\x37\xa5\xa8\x5b\xec\x36\x7c\x18\x43\xb2\xf6\x76\x44\x63\x5a\x92\xb8\x31\x42\xbe\xbb\x74\xb6\x6e\x05\x7d\xbb\x9c\xfb\x3b\x87\x7b\x39\xeb\x44\x59\xd4\x05\xcf\x70\x43\x98\x16\x7b\x6e\xf1\x11\x8f\x10\x82\x73\x74\x81\x7a\x8f\x9a\xc6\x1a\x73\x43\xcf\x4b\xef\x49\x94\xe7\x1a\x8d\xe9\x60\x8d\xe6\x7d\xef\x66\x48\x9e\x84\xb1\xa8\x58\xa9\x6d\x87\x39\xcb\xde\x13\xa6\x71\x55\x41\x08\xe6\x68\x32\x2b\x21\x38\x80\x42\x4b\x45\xb5\x1f\x51\x51\xbd\x15\xa5\x3e\x70\x9d\x87\x83\xff\xb9\x31\xcd\x4a\x55\x50\x2e\x25\x6d\x68\xa1\x76\x17\x06\x51\x59\xbe\x95\x68\x20\x88\xe0\x7e\x9e\xbe\x46\xe9\x04\x02\x51\x9f\xf3\xfb\xf4\x8c\x7f\xa2\xf7\x10\xbc\x43\x14\xc7\x53\xb6\xfc\xc3\x6b\x41\x71\x5b\x47\xb0\xf9\x62\x99\xce\x57\xcb\x64\xf6\x00\x81\x81\x41\x9f\xde\x8e\x69\x9f\xf6\x7b\xc3\x51\x1d\xf0\x1c\x2d\x5e\x56\xd3\x34\x9a\x4c\x89\x73\x9a\xab\x1d\xc2\x75\x26\x05\x2a\x0b\x77\x21\xd0\xf8\x34\x1a\xef\xc9\x15\xfc\xcc\xe0\x5c\x03\xd0\x64\xe2\x3d\x38\x27\x8a\xd6\x42\x67\x22\xfb\x50\xa7\xe3\xce\xd4\xa5\x86\x2a\xf7\x9e\xac\x19\xa2\xde\x10\xf6\xb5\x95\x22\x6b\x7b\x6b\xf1\xa6\xb7\x76\x57\xd7\x26\x65\x79\xc0\x3c\x61\xa6\x03\x76\x9a\x6b\xa3\xbf\x03\x00\x00\xff\xff\xb9\x2b\x8d\x52\x19\x02\x00\x00")

func wgConfigTemplatesServer_configConfBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesServer_configConf,
		"wg-config-templates/server_config.conf",
	)
}

func wgConfigTemplatesServer_configConf() (*asset, error) {
	bytes, err := wgConfigTemplatesServer_configConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/server_config.conf", size: 537, mode: os.FileMode(420), modTime: time.Unix(1722530543, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesServer_peerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\x49\xce\xc9\x4c\xcd\x2b\x51\xb0\xb2\x55\xd0\x73\x06\x33\x8b\x6b\x6b\xb9\xa2\x03\x52\x53\x8b\x62\xb9\x02\x4a\x93\x72\x32\x93\xbd\x53\x2b\x15\x6c\x15\xaa\xab\xa1\x4a\xf5\x9c\x8b\x52\x53\x8a\xf5\xe0\x72\xb5\xb5\x5c\x8e\x39\x39\xf9\xe5\xa9\x29\x9e\x01\xc5\x28\x0a\x1d\x53\x52\x8a\x52\x8b\x8b\x6b\x6b\xf5\x8d\x8d\xb8\xaa\xab\x53\xf3\x52\x6a\x6b\x01\x01\x00\x00\xff\xff\xad\x51\x8d\x87\x78\x00\x00\x00")

func wgConfigTemplatesServer_peerConfBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesServer_peerConf,
		"wg-config-templates/server_peer.conf",
	)
}

func wgConfigTemplatesServer_peerConf() (*asset, error) {
	bytes, err := wgConfigTemplatesServer_peerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/server_peer.conf", size: 120, mode: os.FileMode(420), modTime: time.Unix(1714087262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesTemplatesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdb\x6e\xdc\xc8\x11\x7d\x26\xbf\xa2\x77\x80\x35\xc8\x40\x9e\xe1\xfd\x32\x80\x80\x60\x65\x07\xf1\x43\xbc\x40\x56\x79\x4a\x05\x42\x93\xec\x1e\x13\x99\x19\x4e\x48\xca\x2e\xd9\xd0\xbf\x07\xa7\x8b\x92\x47\xbb\xb6\x64\x04\x79\x18\x89\x6c\x56\xd7\xe5\x54\xf5\x39\xbd\xd9\xa8\xab\xa1\x33\x6a\x67\x8e\x66\xd4\xb3\xe9\x94\x1d\x46\x75\xd2\xed\xbf\xf5\xce\xa8\x83\xee\x8f\xaa\xb9\x53\xbb\xe1\x75\xd3\x1f\x3b\x3d\x6b\xf5\xe6\x57\xf5\xfe\xd7\x6b\xf5\xf6\xcd\xbb\xeb\xb5\x0a\xfe\xfc\xb8\x2f\xf4\x37\x1b\x35\x0d\xb7\x63\x6b\xa6\x2d\x9e\x3f\xed\x5e\xb7\xc3\xd1\xf6\xbb\xd7\xb3\x39\x9c\xf6\x7a\x36\xd3\xa6\xdd\xf7\xe6\x38\xdf\x9c\x8c\x19\xd7\xf8\xf8\x3d\xbb\x0f\x66\x7f\x5a\xcf\x3c\x7f\xef\xfb\x64\xc6\x8f\x66\xbc\x91\xf5\x67\x3d\x2d\x96\x2f\x46\x7c\x7c\x5a\xef\x86\x17\x6d\x6e\x66\x33\xcd\xcf\x18\x7e\x34\xe3\xd4\x0f\x47\x57\xc1\x39\x94\xbe\xdf\x1f\x4e\xc3\x38\xab\xc0\xf7\x56\xcd\xdd\x6c\xa6\x95\xef\xad\xda\xe1\x70\x1a\xcd\x34\x6d\x76\x9f\xfb\x13\x16\xec\x61\xc6\xbf\x7e\x90\xbf\x9b\x7e\xb8\x9d\xfb\x3d\x5e\x06\xb7\xe1\xa4\xe7\x0f\x1b\xdb\xef\x0d\x1e\xb0\x30\xcd\x63\x7f\xdc\xb9\x6f\x73\x7f\x30\x2b\x3f\xf4\x7d\x7b\x7b\x6c\xd5\xd2\xb4\xbf\x1b\xdd\x05\xae\x7b\xff\xfc\x17\xc2\x5e\xa8\xa3\x3e\x18\x25\xdb\x42\x15\x3c\xac\x9a\x71\x1c\xc6\x50\x7d\xf1\xbd\xdd\x67\xf7\xa6\xb6\x97\x0a\x59\xad\xdf\x9b\x4f\x70\x62\xc6\xc0\xa5\x8d\xf7\x5f\x6e\xad\x35\xa3\x73\x1b\x86\xbe\xd7\x5b\xb7\xe1\xa7\x4b\x75\xec\xf7\x70\xe1\x8d\x66\xbe\x1d\x8f\x78\xbd\x50\xf6\x30\xaf\xdf\xc2\xbb\x0d\x56\x70\xa4\x7e\xfe\xcf\x56\xfd\xfc\x71\x25\x99\xb8\x58\xa1\xef\xdd\xfb\xbe\xf7\x51\x8f\xaa\xb9\xb5\x4a\xe2\x48\x10\xdf\xbb\x91\x74\x2e\x55\x3f\xac\xaf\x86\xd3\x5d\xf0\xaa\xb9\xb5\x17\x6a\xf7\x39\xf4\xbd\x76\xff\xf6\x21\xd3\xf5\xd5\x7e\x98\x4c\x10\xfa\xff\xaf\x7c\xe0\x46\xfc\x7f\xc7\x91\x19\x47\xc9\x7b\x59\x6c\x6e\xed\xfa\x17\xa4\x1e\x84\x17\xb0\xf0\xef\x7d\x7f\xbe\x3b\x19\xa5\xa7\xc9\xcc\x80\xfc\xb6\x9d\xe1\xc5\xd5\xb7\xf4\xc3\xf7\xfa\xa3\x1d\x94\x1a\xa6\xf5\x5f\xfa\xbd\x79\x77\xb4\xc3\xe3\xbe\xa5\x85\x0f\xeb\x67\x1e\x5c\x0f\x95\x5a\xda\xe8\x7b\x53\xff\xd9\xbd\xf7\xc7\xb9\xc8\x7c\xef\x80\x63\xad\x1e\x9d\xfe\x6d\xe8\x8c\x5b\xbc\xee\x0f\x46\x61\x4c\xd6\x78\x42\x9c\xcd\x46\xbd\x87\xaf\xa5\x04\x4c\x96\x83\x41\x66\x28\xb0\xfd\xef\x93\x08\x9d\x7d\x10\x2e\xa1\x91\xcc\xe3\xde\xb5\xdb\x29\x5e\x7f\x43\x46\xe7\x5e\x91\xe2\x33\x5e\x61\x1f\x84\x52\xc0\x53\xa7\x6e\xa3\x38\x45\x21\x4f\x9c\xa2\xd0\x67\x9c\xc2\x3e\x08\xcf\x61\x78\xea\xda\x6d\xff\xbe\xeb\xde\xde\x39\xb4\x9e\x8f\x00\x28\x83\xf0\x2b\xac\x7f\x08\x71\x86\xf5\xbb\xe9\x4d\x3f\x3e\x09\xf3\xe9\x83\x99\x3f\x98\x51\x69\xd5\xf5\xa3\x69\xe7\x61\xbc\x7b\x26\x9c\xdb\x1f\x84\xaa\x19\x86\xfd\x1f\x4b\x79\x35\x4c\x6b\xd4\x81\x18\x3f\x5d\xaa\xe8\xa1\x15\x77\xd3\x93\x90\xfd\xa4\xa6\xbb\xe9\x25\xec\x7e\xbb\x9b\xa4\x1f\x66\xb4\xba\x35\x5f\xee\xcf\xe2\x2d\xc3\x8d\xf3\x7a\xf3\x69\x77\xe5\x38\xf0\xfa\x81\x02\xaf\xbe\x12\x3d\xbe\xa8\xcb\x65\xd2\x83\x15\x71\x6c\x89\xab\x86\x38\xaa\x88\xa3\xe8\xdb\x3f\x6b\x89\xb3\x96\xb8\xc2\xff\x98\xb8\xd0\xc4\x6d\x4a\x9c\x46\xc4\x71\x44\x9c\xe5\xc4\xb6\x24\x4e\x35\x71\x95\x13\x27\x46\xd6\x93\x9c\xb8\xa9\x88\x4d\x47\xac\x0b\xe2\x7a\xb1\x2d\x6a\xe2\x26\x91\x98\x49\x4d\x9c\x15\xc4\x69\x46\xdc\x75\xcb\xfe\x96\xb8\x6b\x89\x0d\x72\x2a\x89\xb3\x4c\xd6\xe3\x4c\x6c\x2b\x2d\xb6\x69\x42\xdc\xb6\xcb\xbe\x46\xe2\x74\x05\x71\x64\x88\x9b\x94\xb8\xd6\x92\x17\x7c\x58\x43\x5c\xc3\x26\x5d\xf2\x2b\x88\xbb\x88\x58\xe7\xc4\x69\x2d\xeb\x3a\x93\xd8\x16\xf9\x15\x92\x5b\x57\xc9\xb7\xac\x24\xd6\x96\x38\xcd\xc5\x77\x59\x7f\xad\xaf\x68\x89\x0b\xd8\x6b\x62\x9d\x10\xe7\x88\xd5\x12\x27\x29\xb1\xc9\x88\x53\xd4\x52\x10\x97\x0b\xd6\x6d\x45\x6c\x13\x62\x1d\x13\xe7\x4b\x0d\xc8\x0f\x7b\xdb\x8e\x38\x29\xc4\x3e\x42\x4e\xc0\x20\x27\xae\x6a\x89\x63\x16\xec\xcb\x8a\xb8\x2c\x88\xdb\x92\xb8\xae\x88\xe3\x98\xb8\x06\x0e\x95\xf8\x44\xbe\x51\x23\x35\x66\xa8\x03\xbf\x86\xb8\x00\x16\x11\xb1\x41\x3d\xa8\x33\x22\xae\x4a\xe2\x38\x25\x8e\x91\x7b\x2c\x76\xc0\x5e\x1b\xe2\xb6\x96\x18\xc0\x5a\x2f\x76\x79\x2d\x71\x50\x57\x0a\x3c\x2d\xb1\x45\x6f\x22\xe2\xce\x12\x97\xad\x60\xec\x6c\x0a\xf1\x69\x6a\xe2\x38\x27\xce\x80\x25\xf2\xed\xa4\xc7\x2d\xec\x80\x57\x41\xdc\x60\x2d\x27\x2e\x1b\xe2\x46\x8b\x3d\x7c\xa1\x2f\xe8\x6d\x53\x4a\xac\x12\xeb\x89\xcc\x18\x72\xa9\x81\x4d\x2c\x3e\x92\x46\x7a\x51\x61\x66\x5a\xe9\x85\x9b\x11\xf4\x16\xd8\x74\x82\x33\x7a\x89\x3e\x03\x03\x60\x6a\xd1\x0b\x4b\xdc\x95\xc4\x55\x22\xfd\xc9\x23\xc9\xdd\x02\xe7\x88\xb8\xc9\x89\x23\x60\x66\x64\x1e\xe1\xdb\x34\xb2\x1f\xf5\xa5\xe5\xd3\x33\x83\x1f\x7a\x8d\x39\xc8\x73\x89\x97\x76\xc4\x51\xfc\x60\xb7\x7a\xb8\x1b\xbc\x74\x66\x17\x15\xfb\xd6\xed\xe0\x41\xeb\xce\x6e\x17\xbe\xe7\xbd\xc8\x02\x17\xbe\xe7\xad\x7e\xe4\x5a\xb8\xba\xf0\xbd\x10\xe4\xf2\x43\x89\x22\xc7\x3f\x39\x79\x3d\xcf\xd1\xe9\xeb\xe3\x25\xe6\x07\x8b\x7d\xe9\xda\xf0\xa8\xf6\x4e\xaf\xb7\x97\xbf\x67\xcc\x2f\x10\xbf\xad\xfa\xc1\x22\x9d\x1c\x6e\x55\x1a\x97\x17\x8e\x88\xb7\xe7\x22\x15\x64\x49\x14\xba\x75\x48\xc7\x56\xa4\xe5\x1f\xc7\x9e\x83\xb8\x8c\xb3\xa8\x8e\x8a\xbc\xbc\x50\x51\x78\xef\x7b\x1a\x99\xbc\x72\x08\x7c\x71\x65\x6f\xd5\x52\x3d\xd2\xdc\xba\xbf\xf7\x8f\x5d\xd3\x17\xcf\x53\xf7\x5f\xcd\xfe\x74\xcd\xf3\xff\x44\xd9\xc5\x42\xd9\x4d\x4c\x9c\x99\xaf\x47\x34\x6a\xe5\x78\xd8\x46\x8e\x70\x8b\xd1\x5c\x68\x34\xb3\x42\x07\xd5\x72\x2c\x31\xfa\x3a\x12\xda\x47\x3c\xf8\x71\x34\x8f\xa3\xd3\x10\x67\x1d\xb1\x49\x88\x93\x4c\x28\xb5\x69\xe4\x48\x60\xec\xf1\x3f\x6f\xe5\x19\x94\xa2\x53\xe2\x02\xc7\x32\x5e\xa8\x29\x21\x6e\x16\x5a\x02\x75\x15\x76\xa1\xca\x54\x68\x06\x79\xe4\x5a\x8e\x0f\x28\x0f\x74\xd0\x19\xa1\x1c\xe4\x51\x24\x42\x21\x55\x27\x7e\xa3\x4e\xbe\x83\xfe\x1d\x4d\x54\x4b\x7e\x90\x2d\x2d\xd2\x00\xba\xb3\x9d\xe4\x8e\xda\x50\x0b\xe8\x01\x94\x9b\x2f\xb6\xb6\x22\x6e\xac\xfc\x5a\x50\x97\x11\xaa\x2d\x4b\xc9\x29\x29\xa5\xfe\x32\x26\x6e\x0b\x91\x03\x47\x35\xb9\x50\x53\x0c\x39\x48\x05\x13\x48\x0e\x68\x3e\xe9\x44\x36\x91\x6b\xbd\xd0\x7e\x9d\x4a\x3c\xe4\x82\x6f\x8e\xda\x8d\xe0\xe5\x24\xa5\x14\xfa\x74\x7e\x8c\xe4\x8e\xef\xa8\x11\x94\x5f\x2f\xf4\x5b\x54\x52\x13\xb0\xca\x12\xa1\x71\xf4\x16\xb4\x89\x1a\x41\x37\x90\x00\xb7\xb7\x58\x24\x07\xf6\x8d\xd0\x75\x5a\x89\xb4\xc6\x8d\xf4\x1c\xd8\x42\x7e\x30\x63\x45\x27\xf3\x83\xef\xae\xde\x46\x24\x10\xb8\x41\x3a\x5b\xc4\xca\xa5\xb7\x90\x14\xd0\x26\x66\x09\xfd\x82\x7c\x94\x91\x50\x3d\xe6\x0d\xf5\x82\x62\x5b\x2d\x18\x01\x33\x48\x33\xae\x02\xa0\xd6\x76\xa1\xf8\x3c\x23\x2e\x16\x4c\x10\xc3\xe5\xd5\xc9\x2c\xe1\x9a\xe0\x64\x33\x17\x79\x44\x7e\xdd\x22\xe9\xd8\x87\x59\xec\xb4\xcc\x18\x64\xab\x5d\xae\x2c\x19\xf0\xe8\x64\x26\x4b\x23\x34\x0e\x7f\x75\x22\x72\x83\x99\x49\x2d\x71\x0d\x59\x84\x1c\xc3\x67\x24\x32\x8f\xb9\x47\x5c\xf4\x03\x33\x85\xd9\xc2\xdc\x42\x9a\xd1\xcb\x32\x95\xeb\x0d\xea\x85\x4f\xc8\x3c\x24\x08\x58\xe1\x07\x39\x81\x2c\x01\x67\x9c\x4b\x77\x7d\xd1\x32\xbf\x90\x2d\x5c\x23\x0a\x60\x58\xfe\x37\x00\x00\xff\xff\x01\x44\x02\x84\x00\x10\x00\x00")

func wgConfigTemplatesTemplatesGoBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesTemplatesGo,
		"wg-config-templates/templates.go",
	)
}

func wgConfigTemplatesTemplatesGo() (*asset, error) {
	bytes, err := wgConfigTemplatesTemplatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/templates.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1722530761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesTemplates_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xbd\x8e\xdb\x30\x0c\x9e\xa5\xa7\x20\x34\x39\x45\x4e\xd9\x03\x74\x28\xd0\x76\xe8\x70\xc3\x5d\xb6\xa2\x08\x54\x85\xb6\x85\xda\x92\x2b\xd2\xe9\x05\x85\xdf\xbd\xa0\xf2\x03\xa7\x6d\x80\x64\xb0\x04\x90\xfc\x7e\x28\x93\x83\xf3\x3f\x5c\x83\xc0\xd8\x0f\x9d\x63\x24\xad\x43\x3f\xa4\xcc\x50\x69\x65\x12\x19\xad\xcc\xe0\xb8\x95\x9b\x91\x38\xc4\xc6\x68\xad\x4c\x13\xb8\x1d\xbf\x5b\x9f\xfa\x15\x71\x46\xf6\x6d\x5e\x95\x7c\x7d\x58\x39\x22\xcc\x6c\xf4\x42\xeb\x7a\x8c\x1e\x36\x48\xfc\xca\x8e\x83\xdf\x9c\x55\x2a\x86\x77\x27\x3a\xbb\x59\xc0\x6f\xad\xf8\x30\x20\xb8\xdc\x10\x10\xe7\xd1\xb3\xc4\x54\x1d\x3a\x7c\x76\x3d\x4a\x2c\xc4\x46\xab\x49\x2b\x81\x11\xac\xdf\xc3\xd7\x6f\xb3\xca\x38\xaf\x52\x85\x47\x0e\xad\x26\xc9\xca\x57\x4a\xd6\x60\x5e\xdb\x34\x76\x3b\x68\xdd\x1e\xc1\xa7\xbe\x77\x71\x07\x34\xf6\xbd\xcb\x87\xcb\x2b\x98\xa5\x00\x84\x60\x5d\x68\x0a\xfe\xe2\x66\x0d\xa6\xc5\x6e\xb0\xfc\xc6\xc7\xc2\x49\xce\x72\xdc\x12\xda\x63\xa6\x90\xe2\xfd\x02\x27\xc0\x23\x1a\x84\x79\x8f\x79\xeb\x53\xac\x43\x73\xbf\xd2\x15\xcc\xca\x75\xaf\xa0\xef\x02\x46\xde\x0e\x88\xf9\x7e\xb9\x19\xe8\x21\xb1\x93\xcd\xc7\xc4\x66\xa0\xff\x89\x4d\x5a\xab\x3a\x65\xd8\x2e\x81\x59\x46\x2a\xbb\x58\x76\x41\x26\x4c\xc8\xd8\xbe\x8c\xb1\x62\xb6\x62\x68\x09\x32\xcd\xff\x4e\xae\x52\xf8\x36\xa0\x67\xdc\x7d\x74\xec\x96\x80\x39\x0b\x57\x22\xfb\x82\x6e\xf7\x39\x74\x28\x0c\xe2\xcf\x9e\xad\x2d\x8a\xef\xb2\x26\xf6\x39\x74\x15\x17\x54\x89\x9e\x7b\xbb\xe2\xfa\x40\x84\x5c\xc9\x1e\xda\x2f\x29\xc4\xca\xfc\x6a\x9e\x8e\x3f\xec\xe9\xb2\xb8\x46\x9a\xf8\x4b\xe6\x96\xce\x2c\xfc\xe9\xe7\xe8\x8e\x89\xab\x26\xe6\x36\x84\x65\x5a\xc8\x73\x4d\xfa\x4f\x00\x00\x00\xff\xff\x16\x4c\x31\xfc\x30\x04\x00\x00")

func wgConfigTemplatesTemplates_testGoBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesTemplates_testGo,
		"wg-config-templates/templates_test.go",
	)
}

func wgConfigTemplatesTemplates_testGo() (*asset, error) {
	bytes, err := wgConfigTemplatesTemplates_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/templates_test.go", size: 1072, mode: os.FileMode(420), modTime: time.Unix(1714087262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wgConfigTemplatesVersionTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4f\x2f\x53\x28\x4b\x2d\x2a\xce\xcc\xcf\x53\x28\x33\xd4\x33\xd0\xb3\xe4\x02\x04\x00\x00\xff\xff\x42\xce\x62\xeb\x13\x00\x00\x00")

func wgConfigTemplatesVersionTxtBytes() ([]byte, error) {
	return bindataRead(
		_wgConfigTemplatesVersionTxt,
		"wg-config-templates/version.txt",
	)
}

func wgConfigTemplatesVersionTxt() (*asset, error) {
	bytes, err := wgConfigTemplatesVersionTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wg-config-templates/version.txt", size: 19, mode: os.FileMode(420), modTime: time.Unix(1722530743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wg-config-templates/client_peer.conf":   wgConfigTemplatesClient_peerConf,
	"wg-config-templates/help.txt":           wgConfigTemplatesHelpTxt,
	"wg-config-templates/server_config.conf": wgConfigTemplatesServer_configConf,
	"wg-config-templates/server_peer.conf":   wgConfigTemplatesServer_peerConf,
	"wg-config-templates/templates.go":       wgConfigTemplatesTemplatesGo,
	"wg-config-templates/templates_test.go":  wgConfigTemplatesTemplates_testGo,
	"wg-config-templates/version.txt":        wgConfigTemplatesVersionTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wg-config-templates": &bintree{nil, map[string]*bintree{
		"client_peer.conf":   &bintree{wgConfigTemplatesClient_peerConf, map[string]*bintree{}},
		"help.txt":           &bintree{wgConfigTemplatesHelpTxt, map[string]*bintree{}},
		"server_config.conf": &bintree{wgConfigTemplatesServer_configConf, map[string]*bintree{}},
		"server_peer.conf":   &bintree{wgConfigTemplatesServer_peerConf, map[string]*bintree{}},
		"templates.go":       &bintree{wgConfigTemplatesTemplatesGo, map[string]*bintree{}},
		"templates_test.go":  &bintree{wgConfigTemplatesTemplates_testGo, map[string]*bintree{}},
		"version.txt":        &bintree{wgConfigTemplatesVersionTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
