// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/help.txt
// templates/server_config.conf
// templates/server_peer.conf
// templates/templates.go
// templates/version.txt
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHelpTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xf4\x40\x0c\x84\xfb\x3c\xc5\xfc\xdd\x4f\x87\x8e\x8e\xf6\xa0\x41\x08\x4e\x3a\x89\xab\x4d\xe2\x24\x16\xbb\xeb\xc8\xeb\x5c\xc8\xdb\xa3\x64\x81\x0b\xd2\xb9\xdb\x9d\x6f\x3c\xe3\x13\x87\x5a\x23\xc3\x15\xde\x33\x4e\x62\xdc\x8d\x64\x0d\xde\x0e\x2f\x78\x4d\xef\x4a\xd6\xb0\xfd\xab\xf6\x3a\xcc\x26\x5d\xef\xf8\xbf\xbf\xc1\xee\x76\x77\x87\x27\x89\x71\xc6\xb3\x8c\x55\x75\x1c\x63\x24\x9b\xa1\x2d\x6a\x8d\x91\x52\x93\xef\xab\x6a\xea\xce\xc8\x6c\x67\x36\x24\x9e\xb0\xce\xde\x98\x9c\x33\x68\xfd\x5a\x42\x12\xfb\xa4\xf6\x01\x49\xce\xd6\x52\xcd\x5b\xdf\x38\x14\x1b\x8e\x4e\xe6\x8b\x6d\xb1\x14\x71\xcb\x35\x3a\xa5\xc2\xf5\xa3\xe7\xf2\xfc\xc3\xae\x70\x1d\x84\x93\x5f\xca\x1c\x8c\x07\xb2\xb5\xcd\xb7\x54\x6b\x6a\xa5\x1b\x8d\x5c\x34\xa1\x55\x03\x6d\xd3\x2e\x54\xe2\xda\x81\xc7\xcf\x41\x4b\xad\xeb\x7e\x09\x5c\x92\x7b\x0e\x3f\x97\xac\xf3\x20\x79\x08\x34\x67\x78\x2f\xb9\xa8\x91\x73\xa6\xae\x5c\x7f\x66\xcb\xcb\x82\x2b\x38\xff\x8a\xda\x62\x61\x25\x65\xa7\x10\xb8\xf9\x0a\x00\x00\xff\xff\x86\xf0\x74\x09\xcb\x01\x00\x00")

func templatesHelpTxtBytes() ([]byte, error) {
	return bindataRead(
		_templatesHelpTxt,
		"templates/help.txt",
	)
}

func templatesHelpTxt() (*asset, error) {
	bytes, err := templatesHelpTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/help.txt", size: 459, mode: os.FileMode(420), modTime: time.Unix(1689637104, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServer_configConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x4a\x03\x31\x10\x87\xef\x79\x8a\x01\xbd\x6e\xc4\x3f\x78\x10\xf6\xb0\x6c\x15\x8a\x52\x43\x55\x3c\x94\x22\x69\x32\x5b\xa2\x31\xbb\x4c\x62\x4b\x09\xf3\xee\xd2\x76\xd7\xb6\x07\x6f\x93\x99\x6f\x7e\x64\xbe\xd9\x38\x24\xa4\x46\x1b\x9c\x0b\x45\x6e\xa5\x13\x3e\xe2\x06\x4a\xc8\x59\xbe\x20\xad\x90\x64\x4d\x68\xa3\x3c\x0c\x99\x45\x65\x2d\x61\x8c\x7b\xac\x7f\x30\x5f\x5c\x5f\x89\x27\x17\x13\x06\xd5\x52\x3a\xc9\x38\xb4\x99\x85\x22\x7c\xeb\xa0\x84\xb8\x89\x26\x79\x28\xd6\x10\x30\x49\xd7\xad\x6e\xa4\xeb\x3e\x9a\x96\xd6\x9a\x6c\x79\xf9\x3f\x77\x2b\x4d\x1b\x1a\xa9\xbd\x97\x3d\xed\xc2\xf2\x68\xc1\x75\x49\x2f\x3c\x46\x28\x2a\x78\x78\x9e\xbe\x57\xd3\x11\x14\x6e\xfb\x9d\xbf\x6b\x27\xfa\x1b\x99\xa1\xf8\x84\xaa\xae\xef\xd5\xab\xc8\x99\x74\x58\x22\x9c\x1b\xef\x30\x24\xb8\x2b\x41\xd6\xbb\x32\x32\x8b\x33\xd8\xd7\x90\x73\x0f\xc8\xf1\x88\x19\x72\x76\xcd\xb0\x22\x27\xce\x7c\x85\x5d\xee\x81\x3a\xee\x61\xb0\xcc\x62\xa6\x10\x69\x2e\xd4\xcf\xc2\x3b\x33\xb8\x1e\xf0\xde\xf5\x30\xdb\xaa\xf6\xbe\x5d\xa3\x1d\xab\x78\x02\x9e\x48\xef\xa3\x7f\x03\x00\x00\xff\xff\xae\x85\x65\x46\xcc\x01\x00\x00")

func templatesServer_configConfBytes() ([]byte, error) {
	return bindataRead(
		_templatesServer_configConf,
		"templates/server_config.conf",
	)
}

func templatesServer_configConf() (*asset, error) {
	bytes, err := templatesServer_configConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/server_config.conf", size: 460, mode: os.FileMode(420), modTime: time.Unix(1690158986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServer_peerConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\x49\xce\xc9\x4c\xcd\x2b\x51\xb0\xb2\x55\xd0\x73\x06\x33\x8b\x6b\x6b\xb9\xa2\x03\x52\x53\x8b\x62\xb9\x02\x4a\x93\x72\x32\x93\xbd\x53\x2b\x15\x6c\x15\xaa\xab\xa1\x4a\xf5\x9c\x8b\x52\x53\x8a\xf5\xe0\x72\xb5\xb5\x5c\x8e\x39\x39\xf9\xe5\xa9\x29\x9e\x01\xc5\x28\x0a\x1d\x53\x52\x8a\x52\x8b\x8b\x6b\x6b\xf5\x8d\x8d\xb8\xaa\xab\x53\xf3\x52\x6a\x6b\x01\x01\x00\x00\xff\xff\xad\x51\x8d\x87\x78\x00\x00\x00")

func templatesServer_peerConfBytes() ([]byte, error) {
	return bindataRead(
		_templatesServer_peerConf,
		"templates/server_peer.conf",
	)
}

func templatesServer_peerConf() (*asset, error) {
	bytes, err := templatesServer_peerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/server_peer.conf", size: 120, mode: os.FileMode(420), modTime: time.Unix(1689553641, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplatesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdb\x8e\xdb\xc8\x11\x7d\x26\xbf\xa2\x57\xc0\x1a\x64\x30\x91\x78\xbf\x08\x18\x20\x58\xdb\x41\xfc\x10\x2f\x10\x3b\x4f\xa9\xc0\x68\x92\xdd\x63\x22\x92\xa8\x90\x1c\x6f\x8d\x8d\xf9\xf7\xe0\x74\xf5\x4c\x34\xf6\xd8\x0b\x04\x79\xa0\xc4\x4b\x77\x5d\x4e\x9d\x3a\xd5\xbb\x9d\x7a\x39\x0d\x46\xdd\x98\x93\x99\xf5\x6a\x06\x65\xa7\x59\x9d\x75\xff\x2f\x7d\x63\xd4\x51\x8f\x27\xd5\xdd\xa9\x9b\xe9\x8f\xdd\x78\x1a\xf4\xaa\xd5\xab\x5f\xd5\xdb\x5f\xdf\xab\xd7\xaf\xde\xbc\xdf\xaa\xe8\x4f\x8f\xfb\xe2\x70\xb7\x53\xcb\x74\x3b\xf7\x66\xd9\xe3\x7e\x35\xc7\xf3\x41\xaf\x66\xd9\x7d\x34\x87\xf3\x76\xe5\xf5\xe9\xdb\xc5\xcc\x9f\xcc\xfc\xa1\x9f\x4e\x76\xbc\xd9\xe2\xef\xd9\xef\x67\x63\xe6\x67\xbe\x3e\xde\x6d\x6f\xa6\xa7\x5f\x3e\x99\x79\x19\xa7\x93\x73\x78\x99\x47\x18\x8e\xc7\xf3\x34\xaf\x2a\x0a\x83\x4d\x77\xb7\x9a\x65\x13\x06\x9b\x7e\x3a\x9e\x67\xb3\x2c\xbb\x9b\xcf\xe3\x19\x2f\xec\x71\xc5\xdf\x38\xc9\xef\x6e\x9c\x6e\xd7\xf1\x80\x87\xc9\x6d\x38\xeb\xf5\xe3\xce\x8e\x07\x83\x1b\xbc\x58\xd6\x79\x3c\xdd\xb8\x6f\xeb\x78\x34\x9b\x30\x0e\x43\x7b\x7b\xea\x95\x47\xec\x6f\x46\x0f\x91\x83\xee\x1f\xff\x84\xdb\x2b\x75\xd2\x47\xa3\x64\x5b\xac\xa2\x87\xb7\x66\x9e\xa7\x39\x56\x5f\xc2\xe0\xe6\xb3\x7b\x52\xfb\x6b\x85\xa8\xb6\x6f\xcd\x6f\x30\x62\xe6\xc8\x85\x8d\xe7\x5f\x6e\xad\x35\xb3\x33\x1b\xc7\x61\x30\x5a\xb7\xe1\xa7\x6b\x75\x1a\x0f\x30\x11\xcc\x66\xbd\x9d\x4f\x78\xbc\x52\xf6\xb8\x6e\x5f\xc3\xba\x8d\x36\x30\xa4\x7e\xfe\xf7\x5e\xfd\xfc\x69\x23\x91\x38\x5f\x71\x18\xdc\x87\x61\xf0\x49\xcf\xaa\xbb\xb5\x4a\xfc\x88\x93\x30\xf8\x20\xe1\x5c\xab\x71\xda\xbe\x9c\xce\x77\xd1\x8b\xee\xd6\x5e\xa9\x9b\xcf\x71\x18\xf4\x87\xd7\x0f\x91\x6e\x5f\x1e\xa6\xc5\x44\x71\xf8\xff\x8a\x07\x66\xc4\xfe\x77\x0c\x99\x79\x96\xb8\xfd\xcb\xee\xd6\x6e\x7f\x41\xe8\x51\x7c\x85\x15\xe1\x7d\x18\xae\x77\x67\xa3\xf4\xb2\x98\x15\x90\xdf\xf6\x2b\xac\xb8\xfc\x7c\x3d\xc2\x60\x3c\xd9\x49\xa9\x69\xd9\xfe\x79\x3c\x98\x37\x27\x3b\x3d\xee\xf3\x25\x7c\x78\x7f\x61\xc1\xd5\x50\x29\x5f\xc6\x30\x58\xc6\xcf\xee\x79\x3c\xad\x55\x11\x06\x47\xf4\x94\x7a\x34\xfa\xd7\x69\x30\xee\xe5\xfb\xf1\x68\x14\x68\xb2\xc5\x1d\xfc\xec\x76\xea\x2d\x6c\xf9\x14\xc0\x2c\x07\x83\x70\x28\xb2\xe3\xd7\x41\xc4\x6e\x7d\x14\x7b\xd7\x08\xe6\x71\xef\xd6\xed\x14\xab\xef\x10\xd1\xa5\x55\x84\xf8\x03\xab\x58\x1f\xc5\x92\xc0\x53\xa3\x6e\xa3\x18\x45\x22\x4f\x8c\x22\xd1\x1f\x18\xc5\xfa\x28\xbe\x84\xe1\xa9\x69\xb7\xfd\xfb\xa6\x47\x7b\xe7\xd0\xfa\xb1\x07\x40\x19\xc5\xff\x85\xf5\x1b\x17\x17\x58\xbf\x59\x5e\x8d\xf3\x13\x37\xbf\x7d\x34\xeb\x47\x33\x2b\xad\x86\x71\x36\xfd\x3a\xcd\x77\x3f\x70\xe7\xf6\x47\xb1\xea\xa6\xe9\xf0\x6d\x2a\x2f\xa6\x65\x8b\x3c\xe0\xe3\xa7\x6b\x95\x3c\x94\xe2\x6e\x79\xe2\x72\x5c\xd4\x72\xb7\xfc\x1e\x76\xef\xee\x16\xa9\x87\x99\xad\xee\xcd\x97\xfb\x0b\x7f\x9e\xdc\xe8\xd7\x0f\x8f\xd2\xf7\x17\x73\x38\xbf\xe7\x55\x5d\x7b\x66\x47\x1b\xe2\xd4\x12\x37\x1d\x71\xd2\x10\x27\xc9\xf3\x97\xb5\xc4\x55\x4f\xdc\x58\xe2\x2e\x25\x2e\x0c\xb1\x2d\x88\x0b\x7c\xc7\xfb\x82\xd8\x76\xc4\x79\x4f\xdc\x97\xc4\xb6\x27\x1e\x06\xe2\x02\xb6\x6b\xe2\xc6\xc8\x65\x2b\x62\x9d\x10\x17\xa9\xf8\x83\x9d\x5c\x13\x37\x2d\xb1\xee\x88\x8b\x81\xd8\x64\xc4\x59\x41\x9c\x56\xc4\x5d\x47\x6c\x3a\xe2\xbe\x91\xff\xb2\x97\xfb\xa1\x23\xd6\x39\x71\x55\x10\x37\xb0\xd5\x11\x0f\x19\x71\xd7\xca\xb7\x76\x20\xae\xac\xc4\x63\x72\xe2\x34\x97\x38\x4a\x4d\x9c\xe5\xc4\x3d\xde\x95\xc4\x03\xfc\xe7\x12\x47\x95\x11\x0f\xc8\x65\x10\xbb\xc9\x20\xdf\x13\x43\x9c\x59\xe2\xba\xf1\xf1\x59\xe2\x42\x13\x0f\x88\x0f\xd8\x0c\x12\x3b\x72\x43\x2e\x7d\x4f\x9c\x55\xc4\xa5\x5f\x6b\x1b\xe2\xce\xca\xd5\xa7\xc4\xc6\x10\xd7\x15\x71\x5d\x4b\x4c\x59\x2d\xf9\xd7\x29\x71\x0f\x9b\x88\xb5\x27\x2e\x4b\xe2\xba\x24\x4e\x7b\xe2\x2a\x17\x4c\x5a\xe4\x9d\x12\x67\x88\x51\x4b\xac\x6d\x4a\x5c\x66\xc4\x6d\x2e\xfe\x10\x0b\xbe\x19\xc4\x62\x04\x2f\xd4\xae\xaa\x89\xf3\xca\xdb\x31\x12\x3b\xbe\x23\xc7\xb6\x21\x6e\x7b\xc1\xa2\x6a\x24\x27\x60\x55\x64\xc4\x69\x26\xb5\xd5\x85\xe4\x98\xa0\xfe\xad\xdf\x5b\x89\xef\x1e\xeb\x51\x03\x60\xde\x10\xa7\xa8\x5f\x27\x35\x07\xb6\xa6\x12\x8e\x55\x83\xf0\x07\xdf\x5d\xbe\xe0\x4c\x29\xb8\xe9\x92\xb8\x87\xaf\x52\x6a\x6b\x6a\x62\x9b\x09\x97\x50\x2f\x0d\xdc\x12\xe2\x74\x10\xbe\x21\xdf\x12\x98\x6a\xc1\x08\x98\x25\x35\x71\x07\x1e\x94\x12\x53\x87\x9a\x17\xc4\x95\xc7\x04\x3e\x5c\x5c\x83\x70\x29\x2f\x04\x4f\x60\x9d\xe4\x12\xdf\x00\xac\x8d\xec\x03\x17\x07\x2d\x1c\xeb\x6b\xe2\xde\x0a\x77\x0b\xe0\x31\x08\x27\x6b\x70\xa4\x15\x7b\x6d\x46\x5c\x77\xc2\x99\xdc\x12\xb7\x35\xb1\xee\x89\x2d\x6c\x26\xc4\x75\x2b\xbc\x87\x5f\xd4\x03\x9c\x02\xb7\xc0\x5b\xdd\x48\x2d\x6b\xe4\x5a\x49\xbe\xb0\x59\xa3\xf7\x2a\xc1\x0a\x57\x83\xfe\xe8\x04\x67\xf4\x65\xa3\x25\x46\xf0\xb7\x02\x37\x4a\xe2\x0a\x18\xd6\xc4\x69\x42\xdc\x61\x1d\xfc\xea\xa7\xfd\xec\xf6\x56\xc4\x16\x71\x15\x92\x03\xec\xa3\xbe\xb2\x6e\xf3\x70\x4e\xf9\x5a\x3f\xfc\x04\x7d\xee\x64\xf2\x30\x67\x2f\x4e\x36\x61\x10\x7c\xa3\x40\x57\x61\x10\x6c\xbe\x3d\xff\x6d\xae\xc2\x20\x86\x6c\x3d\xeb\x16\x1e\xff\xe0\x06\xf5\xa5\x47\x37\xa9\x1f\x8f\x43\xdf\x09\xf5\xf7\x0e\x1c\x8f\xe7\x04\x37\xe9\xf7\xd7\x5f\x6b\xed\x17\x8c\xcd\xbd\x7a\x36\x64\x37\x36\xf7\xaa\x28\xdb\x2b\x27\xd8\xfb\xcb\x61\x16\x15\x59\x12\xbb\xf7\x18\x31\x7b\x19\x41\x7f\x3f\x8d\x1c\xa5\x55\xd3\x56\x79\x9d\x26\xc5\x95\x4a\xe2\xfb\x30\xd0\xf0\xfb\xc2\xe5\xf7\xc5\x25\xb5\x57\x3e\x37\x04\xb5\x77\xbf\xf7\x8f\x08\xeb\xab\xe7\x25\xfe\xdd\xe5\xa1\xf9\xe5\x74\xb2\xff\x93\xd8\x83\x10\x6d\xe2\x09\xaf\xa5\x39\xf2\x54\x08\x05\xd1\x82\xd0\x80\xcc\x20\x1f\x08\xd3\x41\x90\x20\x36\x85\x10\x1f\xc4\xc6\x5a\xeb\x45\x12\x02\x04\xc1\xc5\x7a\x08\x46\x91\x4b\xd3\x41\xa0\xdb\x82\x38\x03\x79\x5b\xe2\x3c\x13\x21\xd1\x99\xf8\xc3\x00\x28\x7a\x21\x37\x9a\x0e\x24\x45\x33\x41\x44\x21\xf8\x10\xd2\x01\x4d\x5f\x49\xf3\x43\xf4\x21\x0c\x6d\x2b\xf7\x68\x4e\x88\x79\x87\xf5\xad\x34\x0d\x04\x10\x62\x56\x54\x22\x06\x10\x3e\x0c\x90\xa2\x94\x1c\x9c\x48\x20\x5f\x23\x02\x90\x54\x82\x01\x84\xb4\x6c\xc5\x16\x9a\x19\x02\x00\x8c\x60\x1f\x83\x01\xc2\x09\xe1\x42\x4e\x18\x8a\x88\xa1\xf0\xcd\xe8\x04\x3b\x15\x91\x82\x40\x68\xdf\xd8\x79\x22\x22\x86\x46\xc7\x3f\x06\x01\x06\x42\x5a\x4b\x0c\xf0\x3d\x94\x82\x99\x1b\x2e\x3e\x87\xae\x10\xfb\x4d\x29\xd8\xd5\xbd\x88\x11\x86\x2b\xc4\x11\x4d\xef\x6c\x55\x52\xa7\xac\x11\xb1\x46\x4d\xe0\x13\x02\x0e\xdc\xb4\xaf\x1b\xf0\xc0\x7e\xe4\xdc\x6a\xe2\xb6\x92\xf5\xb8\x47\xed\x60\x03\x22\xe2\x6a\x5b\x8b\x00\x21\x67\xe0\x97\x42\x58\x5b\xe1\x00\x04\x2f\x87\x30\x0e\x5e\xcc\x33\xc1\x05\x83\x0f\xc3\x0c\x7e\x33\x3f\x98\x81\x3f\xe2\xca\xb4\xf0\x05\x97\x1b\x4c\x10\xbe\x5a\x84\x38\xf5\xc3\x02\x31\x5a\x3f\xd8\x31\x48\x21\xe8\xc0\xc9\x6a\x5f\xc3\x56\x84\x1c\xc3\x16\xf9\x6b\x2d\x02\x0a\x9e\x02\x3f\xed\x0f\x11\x58\x07\x6e\x97\x8d\xe0\x86\xda\x63\xbf\xf1\xb5\xc8\x3c\x76\x2e\xbf\xd4\x0f\xf9\x4e\x78\x89\x0b\xbd\x83\x21\x39\x34\x82\x1f\xea\x0f\xc1\x4e\xac\xd8\xb7\xa8\x31\xb8\x0f\x3f\x9e\x9f\x6e\x10\x25\xe2\x0f\x31\x63\x70\xa2\x5e\xa8\x9d\x3b\x24\x18\x19\x30\xa8\x2f\xee\xc1\x13\x37\x9c\x3d\xef\xb5\xaf\x1b\xfa\x03\x83\x69\x28\xa4\x2f\x81\x6f\xee\xe3\x41\xcc\xa9\x11\x31\xc7\x40\xc7\x10\x45\x3e\xee\xa0\xa4\x7d\x1f\x1a\xf1\x07\x8e\xa6\xfe\xd0\x02\xcc\x93\x4c\x70\x2f\x1a\x7f\x80\xc8\x85\x9b\xe8\xf9\x24\xa1\xff\x04\x00\x00\xff\xff\xff\x9a\x57\x94\x00\x10\x00\x00")

func templatesTemplatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplatesGo,
		"templates/templates.go",
	)
}

func templatesTemplatesGo() (*asset, error) {
	bytes, err := templatesTemplatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/templates.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1690159368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVersionTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4f\x2f\x53\x28\x4b\x2d\x2a\xce\xcc\xcf\x53\x28\x33\xd4\x33\xd0\x33\x06\x04\x00\x00\xff\xff\xf7\xe4\x47\x83\x12\x00\x00\x00")

func templatesVersionTxtBytes() ([]byte, error) {
	return bindataRead(
		_templatesVersionTxt,
		"templates/version.txt",
	)
}

func templatesVersionTxt() (*asset, error) {
	bytes, err := templatesVersionTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/version.txt", size: 18, mode: os.FileMode(420), modTime: time.Unix(1690042755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/help.txt":           templatesHelpTxt,
	"templates/server_config.conf": templatesServer_configConf,
	"templates/server_peer.conf":   templatesServer_peerConf,
	"templates/templates.go":       templatesTemplatesGo,
	"templates/version.txt":        templatesVersionTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"help.txt":           &bintree{templatesHelpTxt, map[string]*bintree{}},
		"server_config.conf": &bintree{templatesServer_configConf, map[string]*bintree{}},
		"server_peer.conf":   &bintree{templatesServer_peerConf, map[string]*bintree{}},
		"templates.go":       &bintree{templatesTemplatesGo, map[string]*bintree{}},
		"version.txt":        &bintree{templatesVersionTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
